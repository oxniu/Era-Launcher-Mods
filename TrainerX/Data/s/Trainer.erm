ZVSE2
; Author:   Valery, renewed by Archer30
; Special thanks to Jim Vogan and Hawaiing
; Engine:   ERM 2.0+
; Requires: ERA 3.9+, Era Erm Framework

; Ultimate trainer for ERA


; FU7780004 spells cadres
; FU7780005 air spells
; FU7780006 water spells
; FU7780007 earth spells
; FU7780008 fire spells
; FU7780009 reset clicked cadres
; FU7780010 loop magic schools
; FU7780011 hero forgets all spells
; FU7780012 *removed*
; FU7780013 *removed*
; FU7780014 resources
; FU7780015 *removed*
; FU7780016 *removed*
; FU7780017 *removed*
; FU7780018 *removed*
; FU7780019 *removed*
; FU7780020 *removed*
; FU7780021 *removed*
; FU7780022 *removed*
; FU7780023 *removed*
; FU7780024 *removed*
; FU7780025 *removed*
; FU7780026 *removed*
; FU7780026 *removed*
; FU7780028 *removed*
; FU7780029 *removed*
; FU7780030 *removed*
; FU7780031 *removed*
; FU7780032-FU7780034 forget all skills, frames


!?FU(OnAfterErmInstructions);
!!FU(trainer_CheckWoGScripts):P;
!!FU(trainer_GetFirstHumanPlayer):P?(player:y);
!!VRi^trainer_objChoice^:S0;            [default option - the first option]
!!VRi^trainer_ownerChoice^:S(player);

!?FU(trainer_CheckWoGScripts);
!!UN:P36/?i^wog42_on^;                  [check mithril enhancement]

!?FU(trainer_GetFirstHumanPlayer);
!#VA(player:x);

!!re i/(PLAYER_FIRST)/(PLAYER_LAST);
  !!OW:Ii/?(controller:y);

  !!VR(player)&(controller)=0:Si;
  !!br&(controller)=0;
!!en;

!?FU(OnKeyPressed_AdvMap)&i^key^=(KEY_F2)/999;
!#VA(key:x) (preventDefault:x) (isDown:x);

!!VR(preventDefault):S(TRUE);

!!SN:P^Military.wav^;
!!FU(trainer_SelectHeroMain):P;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=99/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!SN:E5118576/3/i^trainer_hero^/1/1/1;  [display hero dialogue, 5th parameter for type of dialogue]

!?FU(trainer_SelectHeroMain);
!!VRi^trainer_hero^:S(NO_HERO);         [initialise hero ID]
!!SN:T^trainer.titleMain^/?z6 T^trainer.legendMain^/?z7;
!!IF:D55/6/7/0/0/0/0/0;
!!IF:E1/55;
!!VRz1:H1;                              [**check if text entered, flag 1=1 if yes]
!!FU&v1<0:E;                            [Exit on Esc but don't exit when nothing input]

!!VRs^trainer_input^:Sz1;
!!FU(trainer_SelectHeroByInput)&1:P?(isWrongName:y);
!!FU&(isWrongName):E;

!!OW&i^trainer_hero^=(NO_HERO):C?(currPlayer:y);
!!FU(trainer_SelectHeroByPlayer)&i^trainer_hero^=(NO_HERO):P(currPlayer)/0/0;
!!FU(trainer_MainDialog)&i^trainer_hero^>(NO_HERO):P;

!?FU(trainer_SelectHeroByInput);
!#VA(isWrongName:x);

!!VRz1:Ss^trainer_input^;
!!FU(trainer_CheckZ1FirstCharacterIsNum):P?(result:y);
!!VR(hero:y)&(result):Vz1;

!!if&(result)/(hero)>(NO_HERO)/(hero)<=(HERO_LAST_WOG);  [doesn't support extended hero id]
  !!VRi^trainer_hero^:S(hero); 
!!el;

  !!re i/(HERO_FIRST)/(HERO_LAST_WOG);  [search for names if id didn't work]
    !!HEi:B0/?z2;

    !!br&z2=z1;
  !!en;

  !!if&i<=(HERO_LAST_WOG);
    !!VRi^trainer_hero^:Si;
  !!el;
    !!IF:M^%T(trainer.wrongName)^;
    !!VR(isWrongName):S(TRUE);
  !!en;
!!en;

!?FU(trainer_SelectHeroByPlayer);
!#VA(player:x) (isOSMain:x) (isOSTelpt:x);[x2 - mode for Object Scanner main, x3 - mode for Object Scanner teleportation]

!!OW:A(player)/?(hero:y);         [check active hero of the player]

; Get the active hero if available
!!if&(hero)>(NO_HERO);
  !!VRi^trainer_hero^:S(hero);
!!el;                                   [if no active hero, check for heroes on the map]
  ; Get the first hero of the list if no active
  !!OW:O(player)/0/?(hero);

  !!if&(hero)>(NO_HERO);
    !!VRi^trainer_hero^:S(hero);
  !!el;
    ; if not on the map...in towns maybe? excluding OS teleporation - serious bugs if teleporting a hero from a town
    !!if&(isOSTelpt);
      !!IF:M^%T(trainer.objTelptNoHero)^;
    !!el;
      ; Search for heroes in towns if not teleporting feature
      !!re i/(HERO_FIRST)/(HERO_LAST_WOG);
        !!HEi:O?(owner:y);
        !!VRi^trainer_hero^&(player)=(owner):Si;

        !!br&(player)=(owner);
      !!en;

      ; pop up msg if no hero, excluding OS main second search
      !!IF&i>(HERO_LAST_WOG)/(isOSMain)=(FALSE):M^%T(trainer.noHero)^;
    !!en;
  !!en;
!!en;

!?FU(trainer_MainDialog);
!!VR(hero:y):Si^trainer_hero^;          [set trainer hero number]
!!HE(hero):B0/?z1;                      [export name to z1]
!!VRs^trainer_heroName^:Sz1;            [set trainer hero string]
!!HE(hero):O?i^trainer_player^;         [set trainer player number]
!!FU(trainer_GetPlayerStr):Pi^trainer_player^; [set trainer player string]
!!FU(trainer_GetPrimSkillCap):P;               [check if prima.dll is enabled]
!!VRi^trainer_monTablePage^:S(TOWN_CASTLE); [set the page of monster table]
!!VRi^trainer_artTablePage^:S0;         [set the page of artifact table]

!!DL(TRAINER_MAIN_DLG):N^trainer.txt^;

*!FU(trainer_SetDlgColour):P(TRAINER_MAIN_DLG)/i^trainer_player^; [set dialogue colour - disable for now]

!!VRi^trainer_dialogEnabled^:S(TRUE);   [flag for trainer interface]

!!if&i^wog42_on^=(FALSE);               [Archer - hide mithril if disabled]
  !!DL(TRAINER_MAIN_DLG):A113/(DLG_CMD_SET_DEF_FRAME)/0;      [113 - another item for mithril]
  !!VRz30:S^^;                          [BE VERY CAREFUL! Always avoid z30 to z32 in other places of this script - need DL mouse hovering trigger to fix]
  !!DL(TRAINER_MAIN_DLG):H(TRAINER_MITHRIL_AREA)/z30; [DL:H doesn't work on ^^]
!!en;

!!UN:P49/?(henchOn:y);

!!if&(henchOn)=(FALSE);                 [hide henchman button if disabled or the slot is empty]

  !!re i/228/234;
    !!DL(TRAINER_MAIN_DLG):Ei/0;
  !!en;

  !!DL(TRAINER_MAIN_DLG):E(TRAINER_BTN_HENCH)/0;
!!en;

!!if&i^Advanced_Classes_Mod_Active^;    [Is there a trigger for DL mouse hovering?]
  !!SN:T^trainer.acm.ss5^/?z31 T^trainer.acm.ss19^/?z32;
  !!DL(TRAINER_MAIN_DLG):H60/z31;       [item of nobility (navigation)]
  !!DL(TRAINER_MAIN_DLG):H74/z32;       [item of warfare (tactics)]
!!en;

!!HE(hero):E?(exp:y)/?(lv:y)/1;
!!VRi^trainer_heroLv^:S(lv);

!!FU(trainer_RefeshHeroArmy):P(hero); hero army
!!FU(trainer_RefreshMonTable):Pi^trainer_monTablePage^;

!!FU(trainer_GetHeroPortrait):P(hero)/1/2; [export hero's large portrait to z2]
!!DL(TRAINER_MAIN_DLG):A99/(DLG_CMD_SET_PCX)/z2/1;

!!SN:W^Fire_school^/1;
!!SN:W^Air_school^/0;
!!SN:W^Water_school^/0;
!!SN:W^Earth_school^/0;
!!DO7780004/196/213/1:P;

!!FU(acm_CreateSsNamesArray)&i^Advanced_Classes_Mod_Active^:P;

!!VR(player:y):Si^trainer_player^;
!!DO7780014/0/7/1&(player)>(NO_PLAYER):P(player)/10; [Archer - check resources including mithril]

; Set up 0 resoruces for hero without owner
!!if&(player)=(NO_PLAYER);
  !!VRz5:S^0^;

  !!re (item:y)/21/27;
    !!DL(TRAINER_MAIN_DLG):A(item)/(DLG_CMD_SET_TEXT)/z5/1;
  !!en;

  !!DL(TRAINER_MAIN_DLG)&i^wog42_on^:A(TRAINER_MITHRIL_AREA)/(DLG_CMD_SET_TEXT)/z5/1;    [set mithril value]
!!en;

!!FU(trainer_RefreshDlgsOnLevelUp):P(hero);

!!DL(TRAINER_MAIN_DLG):S1;
!!UN:R1 R2;                             [redraw screen after DL is closed - Thanks to daemon_n!]

!?FU(trainer_RefreshDlgsOnLevelUp);
!#VA(hero:x);

!!FU(trainer_RefreshArtTable):Pi^trainer_artTablePage^;
!!FU(trainer_RefreshPrimSkills):P(hero);
!!FU(trainer_RefreshSecSkills):P(hero);
!!FU(trainer_RefreshMoveBar):P(hero);
!!FU(trainer_RefreshManaBar):P(hero);

!!HE(hero):E?(exp:y)/?(lv:y)/1;
!!FU(trainer_RefreshHeroLevel):P(lv); hero level

!?FU(trainer_RefreshMoveBar);
!#VA(hero:x);

!!HE(hero):W?(currMove:y)/1;

!!if&(currMove)<=0;
  !!VR(moveCadre:y):S0;
!!el&(currMove)>0/(currMove)<2300;
  !!VR(moveCadre):S(currMove) -1 :100 +1;
!!el&(currMove)>=2300/(currMove)<2500;
  !!VR(moveCadre):S23;
!!el&(currMove)>=2500/(currMove)<2800;
  !!VR(moveCadre):S24;
!!el&(currMove)>=2800;
  !!VR(moveCadre):S25;
!!en;

!!DL(TRAINER_MAIN_DLG):A30/(DLG_CMD_SET_DEF_FRAME)/(moveCadre)/1;

!?FU(trainer_RefreshManaBar);
!#VA(hero:x);

!!HE(hero):I?(currMana:y)/1;

!!if&(currMana)<=0;
  !!VR(manaCadre:y):S0;
!!el&(currMana)>0/(currMana)<111;
  !!VR(manaCadre):S(currMana) -1 :5 +1;
!!el&(currMana)>=111/(currMana)<145;
  !!VR(manaCadre):S23;
!!el&(currMana)>=145/(currMana)<170;
  !!VR(manaCadre):S24;
!!el(currMana)>=170;
  !!VR(manaCadre):S25;
!!en;

!!DL(TRAINER_MAIN_DLG):A31/(DLG_CMD_SET_DEF_FRAME)/(manaCadre)/1;

!?FU(trainer_GetHeroPortrait);
; x1 - hero's number (0..155)
; x2 - portrait type (0-small, 1-large)
; x3 - the number of the z-variable for recording the name of the large portrait
!!VRzx3:S^^;
!!FU|x1<=(NO_HERO):E;

!!UN:C6806760/4/?y1;
!!VRx2:*4 +48 +y1;
!!VRx3:*512+9597416;
!!SN:E7411341/1/x1;
!!VRy1:Sv1 +52;
!!UN:Cy1/1/?y1;
!!VRy1&y1<0:+256;
!!VRy1:*92 +x2;
!!UN:Cy1/4/?y1;

!!re y3/1/512;
  !!UN:Cy1/1/?y2 Cx3/1/y2;
  !!br&y2=0;

  !!VRy1:+1;
  !!VRx3:+1;
!!en;

!?FU(trainer_GetPlayerStr);
!#VA(player:x) (playerStrIndex:x);

!!FU(trainer_GetTxtFileString):P^plcolors^/(player)/?s^trainer_player^;

!?FU(trainer_GetTxtFileString);
!#VA(txtFileName:x) (stringNum:x) (string:x);

!!VR(txtLoadAddres:y):S0;

!!FU(StrToLower):Pz(txtFileName)/?(txtName:z);

!!if|(txtName)=^priskill.txt^/(txtName)=^priskill^;
  !!VR(txtLoadAddres):+6974556;ps
!!el|(txtName)=^restypes.txt^/(txtName)=^restypes^;
  !!VR(txtLoadAddres):+6968208;rest
!!el|(txtName)=^plcolors.txt^/(txtName)=^plcolors^;
  !!VR(txtLoadAddres):+6976900;plcol
!!el;
  !!VR(string):Z^Wrong txt file name!^;
  !!FU:E;
!!en;

; @Master Of Puppets
!!UN:C(txtLoadAddres)/4/?y1;            
!!VRy1:+32;
!!UN:Cy1/4/?y2;
!!VR(stringNum):*4+y2;
!!UN:C(stringNum)/4/?y1;
!!SN:X?y4 Xy1 X?z1 Xy4;
!!VR(string):Z^%z1^;

!?FU(trainer_SetDlgColour);             [not used for now]
!!SN:E7510739/1/x1;
!!UN:Cv1/4/?y1;
!!VRy2:Sy1 +76;
!!UN:Cy2/4/?y3;
!!SN:E6288384/2/y1/512/13/y3/x2;

!?FU(acm_CreateSsNamesArray);
!!FU(NewStrArray):P28/?i^acm_ssNames^/(M_TEMP);
!!SN:Vi^acm_ssNames^/0/^Pathfinding^/^Archery^/^Logistics^/^Scouting^/^Diplomacy^/^Nobility^/^Leadership^
  /^Wisdom^/^Mysticism^/^Luck^/^Ballistics^/^Eagle Eye^/^Necromancy^/^Estates^;
!!SN:Vi^acm_ssNames^/14/^Fire Magic^/^Air Magic^/^Water Magic^/^Earth Magic^/^Scholar^/^Tactics^/^Artillery^
  /^Learning^/^Offense^/^Armorer^/^Intelligence^/^Sorcery^/^Resistance^/^First Aid^;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=30722/i^mouse_action^=(MOUSE_LMB_RELEASED);      [close trainer]
!!VR(hero:y):Si^trainer_hero^;
!!VR(lvNew:y):Si^trainer_heroLv^;
!!HE(hero):E?(exp:y)/?(lv:y)/1;
!!VR(hasLeveledUp:y):S(FALSE);

; if the level of the heroe was changed (via trainer), level up the part below Level 74 and change only the level number for the part above 74
!!if&(lvNew)>(lv);
  !!VR(lvFixed:y):S(lvNew) F1/(TRAINER_LEVEL_CAP_LEGIT);

  !!if&(lvFixed)>(lv);
    !!FU(trainer_CalcExpWithLevel):P(lvFixed)/?(expFixed:y);
    !!HE(hero):E(expFixed);
    !!VR(hasLeveledUp):S(TRUE);
  !!en;
!!en;

; keep the Trainer Interface if the hero has leveled up upon clicking checkmark, otherwise close the dialogue
!!if&(hasLeveledUp);
  !!FU(trainer_RefreshDlgsOnLevelUp):P(hero);
!!el;
  !!DL(TRAINER_MAIN_DLG):C1;
  !!HE(hero):E?(exp)/(lvNew);

  !!re (item:y)/196/212;                [de-select all fire spells (spell of the first page)]
    !!VRi^Fire_%(item)^:S(FALSE);
  !!en;

  !!VRi^trainer_dialogEnabled^:S(FALSE);[flag for trainer interface]
!!en;

!?FU(trainer_GetFixedLv);
!#VA(lv:x) (isLvUp:x) (lvFixed:x);

!!VR(lvFixed)&(lv)<=(TRAINER_LEVEL_CAP_LEGIT):S(lv);

!!if&(isLvUp);
  !!if&(lv)>(TRAINER_LEVEL_CAP_LEGIT)/(lv)<=88;
    !!VR(lvFixed):S88;
  !!el&(lv)>88/(lv)<=100;
    !!VR(lvFixed):S100;
  !!el&(lv)>100/(lv)<=108;
    !!VR(lvFixed):S108;
  !!el&(lv)>108/(lv)<=868;
    !!VR(lvFixed):S868;
  !!el&(lv)>868/(lv)<=3732;
    !!VR(lvFixed):S3732;
  !!el&(lv)>3732/(lv)<=5920;
    !!VR(lvFixed):S5920;
  !!el&(lv)>5920/(lv)<=(TRAINER_LEVEL_CAP_EXTREME);
    !!VR(lvFixed):S(TRAINER_LEVEL_CAP_EXTREME);
  !!el&(lv)>(TRAINER_LEVEL_CAP_EXTREME);
    !!VR(lvFixed):S1;
  !!en;
!!el;
  !!if&(lv)<1;
    !!VR(lvFixed):S(TRAINER_LEVEL_CAP_EXTREME);
  !!el&(lv)>=(TRAINER_LEVEL_CAP_LEGIT)/(lv)<88;
    !!VR(lvFixed):S(TRAINER_LEVEL_CAP_LEGIT);
  !!el&(lv)>=88/(lv)<100;
    !!VR(lvFixed):S88;
  !!el&(lv)>=100/(lv)<108;
    !!VR(lvFixed):S100;
  !!el&(lv)>=108/(lv)<868;
    !!VR(lvFixed):S108;
  !!el&(lv)>=868/(lv)<3732;
    !!VR(lvFixed):S868;
  !!el&(lv)>=3732/(lv)<5920;
    !!VR(lvFixed):S3732;
  !!el&(lv)>=5920/(lv)<(TRAINER_LEVEL_CAP_EXTREME);
    !!VR(lvFixed):S5920;
  !!el&(lv)>=(TRAINER_LEVEL_CAP_EXTREME);
    !!VR(lvFixed):S(TRAINER_LEVEL_CAP_EXTREME);
  !!en;
!!en;

!?FU(trainer_CheckZ1FirstCharacterIsNum);[Hawaiing]
!#VA(result:x);

!!VR(result):S(FALSE);
!!UN:C9597928/1/?(firstChar:y);
!!VR(result)&(firstChar)>=48/(firstChar)<=57:S(TRUE);

*?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG); [set dialogue colour - disable for now]
*!FU(trainer_SetDlgColour):P(TRAINER_MAIN_DLG)/i^trainer_player^; 
*!SN:D;

; Show guide/info/help of Trainer
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=9/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!IF:Q1/(PIC_TYPE_FLAG)/i^trainer_player^/(PIC_TYPE_FLAG)/i^trainer_player^/1^%z177300^;        [ert - the only choice for long text?]

!?FU(OnKeyPressed)&i^key^=(KEY_F1)/i^trainer_dialogEnabled^;
!!IF:Q1/(PIC_TYPE_FLAG)/i^trainer_player^/(PIC_TYPE_FLAG)/i^trainer_player^/1^%z177300^;

**************************** SPELLS ************************************
; buttons of magic schools/right
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=14/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!SN:W^Fire_school^/?y1;
!!SN:W^Air_school^/?y2;
!!SN:W^Water_school^/?y3;
!!SN:W^Earth_School^/?y4;
!!DO7780005/36/53/1&y1=1:P18;           [fire-->air]
!!DL(TRAINER_MAIN_DLG)&y1=1:A11/(DLG_CMD_SET_DEF_FRAME)/1/1;
!!DO7780006/36/53/1&y2=1:P36;           [air-->water]
!!DL(TRAINER_MAIN_DLG)&y2=1:A11/(DLG_CMD_SET_DEF_FRAME)/2/1;
!!DO7780007/36/53/1&y3=1:P54;           [water-->earth]
!!DL(TRAINER_MAIN_DLG)&y3=1:A11/(DLG_CMD_SET_DEF_FRAME)/3/1;
!!DO7780008/36/53/1&y4=1:P0;            [Archer - earth-->fire]
!!DL(TRAINER_MAIN_DLG)&y4=1:A11/(DLG_CMD_SET_DEF_FRAME)/0/1;
!!SN&y1=1:W^Air_school^/1;
!!SN&y1=1:W^Fire_school^/0;
!!SN&y2=1:W^Water_school^/1;
!!SN&y2=1:W^Air_school^/0;
!!SN&y3=1:W^Earth_school^/1;
!!SN&y3=1:W^Water_school^/0;
!!SN&y4=1:W^Fire_school^/1;
!!SN&y4=1:W^Earth_school^/0;
!!DO7780004/196/213/1:P;                [reset selected cadres, if any]
!!DO7780009/196/213/1:P;

!?FU7780005;
; display air spells icons
!!DL(TRAINER_MAIN_DLG):Ax16/(DLG_CMD_SET_DEF_FRAME)/x1/1;
!!VRx1:+1;
!?FU7780006;
; display water spells icons
!!DL(TRAINER_MAIN_DLG):Ax16/(DLG_CMD_SET_DEF_FRAME)/x1/1;
!!VRx1:+1;
!?FU7780007;
; display earth spells icons
!!DL(TRAINER_MAIN_DLG):Ax16/(DLG_CMD_SET_DEF_FRAME)/x1/1;
!!VRx1:+1;
!?FU7780008;
; display fire spells icons
!!DL(TRAINER_MAIN_DLG):Ax16/(DLG_CMD_SET_DEF_FRAME)/x1/1;
!!VRx1:+1;

; button magic schools/left
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=13/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!SN:W^Earth_school^/?y1;
!!SN:W^Water_school^/?y2;
!!SN:W^Air_school^/?y3;
!!SN:W^Fire_school^/?y4;
!!DO7780006/36/53/1&y1=1:P36;           [earth-->water]
!!DL(TRAINER_MAIN_DLG)&y1=1:A11/(DLG_CMD_SET_DEF_FRAME)/2/1;
!!DO7780005/36/53/1&y2=1:P18;           [water-->air]
!!DL(TRAINER_MAIN_DLG)&y2=1:A11/(DLG_CMD_SET_DEF_FRAME)/1/1;
!!DO7780008/36/53/1&y3=1:P0;            [air-->fire]
!!DL(TRAINER_MAIN_DLG)&y3=1:A11/(DLG_CMD_SET_DEF_FRAME)/0/1;
!!DO7780008/36/53/1&y4=1:P54;            [fire-->earth]
!!DL(TRAINER_MAIN_DLG)&y4=1:A11/(DLG_CMD_SET_DEF_FRAME)/3/1;
!!SN&y1=1:W^Water_school^/1;
!!SN&y1=1:W^Earth_school^/0;
!!SN&y2=1:W^Air_school^/1;
!!SN&y2=1:W^Water_school^/0;
!!SN&y3=1:W^Fire_school^/1;
!!SN&y3=1:W^Air_school^/0;
!!SN&y4=1:W^Earth_school^/1;
!!SN&y4=1:W^Fire_school^/0;
!!DO7780004/196/213/1:P;                [reset selected cadres, if any]
!!DO7780009/196/213/1:P;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^>195/i^mouse_item^<214/i^mouse_action^=(MOUSE_RMB_PRESSED);
; Display spells names on right-click
!!if&i^Fire_school^;
  !!FU&i^mouse_item^=213:E; last icon is not used

  !!VRv2:C43/42/15/31/62/13/21/11/52/26/59/29/56/22/55/66; [index of fire spells]
  !!VRv18:S40;
!!el&i^Air_school^;
  !!VRv2:C53/47/51/17/44/30/28/25/60/19/58/69/36/5/4/2; [index of air spells]
  !!VRv18:C8/6;
!!el&i^Water_school^;
  !!FU&i^mouse_item^=213:E; last icon is not used

  !!VRv2:C41/37/35/32/16/64/45/61/20/49/63/65/48/68/0/1; [index of water spells]
  !!VRv18:S7;
!!el&i^Earth_school^;
  !!VRv2:C15/27/54/46/24/10/39/34/14/12/33/23/38/50/67/18; [index of earth spells]
  !!VRv18:C3/9;
!!en;

!!VR(ptr:y):Si^mouse_item^-194;         [get click location to match v2-v20]
!!VR(spell:y):Sv(ptr);                  [spell is now stored in y6]
!!SN:H^spell^/(spell)/(SPELL_TEXT_DESCR)/?(spellDesc:z); [store spell description in z3]
!!IF:Q1/9/(spell)/4^%(spellDesc)^;      [display spell graphic and name]

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^>195/i^mouse_item^<214/i^mouse_action^=(MOUSE_LMB_PRESSED);
; select spells
!!SN:W^Fire_school^/?y1;                [check page]
!!SN:W^Air_school^/?y2;
!!SN:W^Water_school^/?y3;
!!SN:W^Earth_school^/?y4;
!!FU&y1=1/i^mouse_item^=213:E;          [Archer - toggle spell cadre]
!!FU&y3=1/i^mouse_item^=213:E;          [exit if last icon in fire/water indexes]

!!VRy30:S0;
!!VRy30&y1=1/i^Fire_%i(mouse_item)^=1:S1;
!!VRy30&y2=1/i^Air_%i(mouse_item)^=1:S1;
!!VRy30&y3=1/i^Water_%i(mouse_item)^=1:S1;
!!VRy30&y4=1/i^Earth_%i(mouse_item)^=1:S1;

!!if&y30=0;
  !!DL(TRAINER_MAIN_DLG):Ai^mouse_item^/(DLG_CMD_SET_DEF_FRAME)/1/1; [set to selected]
  !!SN&y1=1:W^Fire_%i(mouse_item)^/1;
  !!SN&y2=1:W^Air_%i(mouse_item)^/1;
  !!SN&y3=1:W^Water_%i(mouse_item)^/1;
  !!SN&y4=1:W^Earth_%i(mouse_item)^/1;
!!el;
  !!DL(TRAINER_MAIN_DLG):Ai^mouse_item^/(DLG_CMD_SET_DEF_FRAME)/0/1; [set to de-selected]
  !!SN&y1=1:W^Fire_%i(mouse_item)^/0;
  !!SN&y2=1:W^Air_%i(mouse_item)^/0;
  !!SN&y3=1:W^Water_%i(mouse_item)^/0;
  !!SN&y4=1:W^Earth_%i(mouse_item)^/0;
!!en;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=110/i^mouse_action^=(MOUSE_LMB_RELEASED); Button hero forgets all spells
!!re i/196/213;                         [Archer - deselect all by forget all spell button]
  !!VRy30:S0;
  !!VRy30&i^Fire_School^=1/i^Fire_%i^=1:S1;
  !!VRy30&i^Air_School^=1/i^Air_%i^=1:S1;
  !!VRy30&i^Water_School^=1/i^Water_%i^=1:S1;
  !!VRy30&i^Earth_School^=1/i^Earth_%i^=1:S1;

  !!if&y30=1;
    !!DO7780009/196/213/1:P;
    !!DO7780004/196/213/1:P;
    !!FU:E;
  !!en;
!!en;

!!SN:W^trainer_hero^/?y1;
!!HEy1:B0/?z1;
!!SN:T^trainer.forgAllSpl^/?z2/^hero^/z1;
!!IF:Q1^%z2^;
!!FU&-1:E;

!!DO7780011/0/69/1:Py1;
!!SN:P^openbook.wav^;

!?FU7780011;                            [Hero forgets all spells]
!!HEx1:Mx16/?y1;
!!HEx1&y1=1:Mx16/0;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=109/i^mouse_action^=(MOUSE_LMB_RELEASED); Button learn spells selected
!!SN:W^Fire_school^/?y1;                [find in which index we are]
!!SN:W^Air_school^/?y2;
!!SN:W^Water_school^/?y3;
!!SN:W^Earth_school^/?y4;

!!if|y1=1/y3=1;                         [Archer - select all by learn spell button]

  !!re i/196/212;

    !!br&y1=1/i^Fire_%i^=1;
    !!br&y3=1/i^Water_%i^=1;

    !!if&i=212;
      !!re i/196/212;
        !!VRi^Fire_%i^:S1;
        !!VRi^Air_%i^:S1;
        !!VRi^Water_%i^:S1;
        !!VRi^Earth_%i^:S1;
        !!DL(TRAINER_MAIN_DLG):Ai/(DLG_CMD_SET_DEF_FRAME)/1/1;
      !!en;

      !!FU:E;
    !!en;
  !!en;
!!en;

!!if|y2=1/y4=1;

  !!re i/196/213;

    !!br&y2=1/i^Air_%i^=1;
    !!br&y4=1/i^Earth_%i^=1;

    !!if&i=213;
      !!re i/196/213;
        !!VRi^Fire_%i^:S1;
        !!VRi^Air_%i^:S1;
        !!VRi^Water_%i^:S1;
        !!VRi^Earth_%i^:S1;
        !!DL(TRAINER_MAIN_DLG):Ai/(DLG_CMD_SET_DEF_FRAME)/1/1;
      !!en;

      !!FU:E;
    !!en;
  !!en;
!!en;

!!VRy30:Si^trainer_hero^;               [disable annoying pop-ups]
!!HEy30:B0/?z6;
!!HEy30:A2/0/?y7/?y8;
!!HEy30&y8<1:A4/0;                      [give spell book]
!!VRz4:S^^;
!!VRz5:S^^;
!!DO7780010/196/213/1&y1=1:P0;
!!DO7780010/196/213/1&y2=1:P1;
!!DO7780010/196/213/1&y3=1:P2;
!!DO7780010/196/213/1&y4=1:P3;
!!VRz2:S^^;
!!VRz3:S^^;

!!if&z4<>^^;
  !!SN:T^trainer.splLearned^/?z2/^hero^/z6/^spell^/z4;
  !!VRz7:Sz2;
!!en;

!!if&z5<>^^;
  !!SN:T^trainer.splLearns^/?z3/^hero^/z6/^spell^/z5;

  !!if&z4<>^^;
    !!VRz7:S^%z2

%z3^;
  !!el;
    !!VRz7:Sz3;
  !!en;
!!en;

!!IF:M^%z7^;

!!SN:P^openbook.wav^;

!!DO7780009/196/213/1:P;                [reset spells after learning them]
!!DO7780004/196/213/1:P;                [reset cadres]

!?FU7780010;
; x1 magic school ID
!!VRz1&x1=0:S^Fire^;
!!VRz1&x1=1:S^Air^;
!!VRz1&x1=2:S^Water^;
!!VRz1&x1=3:S^Earth^;
!!SN:W^%Z1_%X16^/?y1;
!!FU&y1<1:E;

!!if&x1=0;
  !!FU&x16=213:E;                       [last icon is not used]

  !!VRv2:C42/43/15/31/62/13/21/11/52/26/59/29/56/22/55/66; [index of fire spells]
  !!VRv18:S40;
!!el&x1=1;
  !!VRv2:C53/47/51/17/44/30/28/25/60/19/58/69/36/5/4/2; [index of air spells]
  !!VRv18:C8/6;
!!el&x1=2;
  !!FU&x16=213:E;                       [last icon is not used]

  !!VRv2:C41/37/35/32/16/64/45/61/20/49/63/65/48/68/0/1; [index of water spells]
  !!VRv18:S7;
!!el&x1=3;
  !!VRv2:C15/27/54/46/24/10/39/34/14/12/33/23/38/50/67/18; [index of earth spells]
  !!VRv18:C3/9;
!!en;

!!VRy5:Sx16-194;                        [get click location to match v2-v20]
!!VRy6:Svy5;                            [spell is now stored in y6]
!!VRy30:Si^trainer_hero^;
!!HEy30:My6/?y7;
!!UN:N1/z3/y6;
!!SN:T^trainer.comma^/?z1;

!!if&y7=1;
  !!VRz4&z4<>^^:+^%z1^;
  !!VRz4:+z3;
!!el;
  !!VRz5&z5<>^^:+^%z1^;
  !!VRz5:+z3;
  !!HEy30:My6/1;
!!en;

!?FU7780009;                            [forget spells selected if change magic school]
!!SN:W^Fire_%X16^/0;
!!SN:W^Air_%X16^/0;
!!SN:W^Water_%X16^/0;
!!SN:W^Earth_%X16^/0;

!?FU7780004;
; Spell cadres reset to 0
!!DL(TRAINER_MAIN_DLG):Ax16/(DLG_CMD_SET_DEF_FRAME)/0/1;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=54/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!if&i^Fire_school^;
  !!VR(school:y):S(SKILL_FIRE_MAGIC);
!!el&i^Air_school^;
  !!VR(school):S(SKILL_AIR_MAGIC);
!!el&i^Water_school^;
  !!VR(school):S(SKILL_WATER_MAGIC);
!!el&i^Earth_school^;
  !!VR(school):S(SKILL_EARTH_MAGIC);
!!en;

!!SN:H^secskill^/(school)/0/?(schoolName:z);
!!VR(picSubtype:y):S(school) *3 +3 +2;
!!IF:Q1/(PIC_TYPE_SEC_SKILL)/(picSubtype)/4^%(schoolName)^;

***************************** END SPELLS ******************************

************************** Secondary Skills ***************************
; Added ACM new skill levels support
!?FU(trainer_RefreshSecSkills);
!#VA(hero:x);

!!re i/(SEC_SKILL_FIRST)/(SEC_SKILL_LAST);
  !!HE(hero):Si/?(ssLv:y);
  !!VR(ssItem:y):Si +55;
  !!VR(ssHighlight:y):Si +168;
  !!FU(trainer_SetSecSkillCadre):Pi/(ssLv)/(ssItem)/(ssHighlight); [refresh secondary skill for each of the itmes]
!!en;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^>=55/i^mouse_item^<=82/i^mouse_action^=(MOUSE_LMB_PRESSED);
!!VR(hero:y):Si^trainer_hero^;
!!VR(ss:y):Si^mouse_item^ -55;
!!HE(hero):S(ss)/?(ssLv:y);
!!SN&i^Advanced_Classes_Mod_Active^:Mi^acm_ssNames^/(ss)/?z10;

; Ctrl Click - increase skill level by 1
!!if&i^key_ctrl^/i^key_shift^=(FALSE)/i^key_alt^=(FALSE);
  !!VR(ssLvNew:y):S(ssLv) +1;

  !!if&i^Advanced_Classes_Mod_Active^=(FALSE);
    !!VR(ssLvNew)&(ssLvNew)=4:S(SKILL_NOT_LEARNED);
  !!en;

  !!if&(ssLvNew)=4/i^Advanced_Classes_Mod_Active^;
    !!if&i^H3_%z10_0_Hero%(hero)^=(FALSE)/i^H3_%z10_1_Hero%(hero)^=(FALSE);
      ; Set secondary skill to level 4/5 in order to compare if skill level was changed
      ; The excessive level will be fixed later after playing sound
      !!VR(ssLvNew):S4;
      !!VRi^H3_%z10_0_Hero%(hero)^:S(TRUE);
    !!el&i^H3_%z10_0_Hero%(hero)^/i^H3_%z10_1_Hero%(hero)^=(FALSE);
      !!VR(ssLvNew):S5;
      !!VRi^H3_%z10_1_Hero%(hero)^:S(TRUE);
    !!el&i^H3_%z10_0_Hero%(hero)^/i^H3_%z10_1_Hero%(hero)^;
      !!VR(ssLvNew):S(SKILL_NOT_LEARNED);
      !!VRi^H3_%z10_0_Hero%(hero)^:S(FALSE);
      !!VRi^H3_%z10_1_Hero%(hero)^:S(FALSE);
    !!en;
  !!en;
; Shift Click - reduce skill level by 1
!!el&i^key_ctrl^=(FALSE)/i^key_shift^/i^key_alt^=(FALSE);
  !!if|(ssLv)=(SKILL_BASIC)/(ssLv)=(SKILL_ADVANCED);
    !!VR(ssLvNew):S(ssLv) -1;
  !!en;

  !!if&i^Advanced_Classes_Mod_Active^=(FALSE);
    !!if&(ssLv)=(SKILL_NOT_LEARNED);
      !!VR(ssLvNew):S(SKILL_EXPERT);
    !!el&(ssLv)=(SKILL_EXPERT);
      !!VR(ssLvNew):S(SKILL_ADVANCED);
    !!en;
  !!en;

  !!if&i^Advanced_Classes_Mod_Active^;
    !!if&(ssLv)=(SKILL_NOT_LEARNED);
      !!VRi^H3_%z10_0_Hero%(hero)^:S(TRUE);
      !!VRi^H3_%z10_1_Hero%(hero)^:S(TRUE);
      !!VR(ssLvNew):S5;
    !!el&(ssLv)=(SKILL_EXPERT);
      !!if&i^H3_%z10_0_Hero%(hero)^/i^H3_%z10_1_Hero%(hero)^;
        !!VRi^H3_%z10_1_Hero%(hero)^:S(FALSE);
        !!VR(ssLvNew):S4;
      !!el&i^H3_%z10_0_Hero%(hero)^/i^H3_%z10_1_Hero%(hero)^=(FALSE);
        !!VRi^H3_%z10_0_Hero%(hero)^:S(FALSE);
        !!VR(ssLv):S4;                  [fix origianl secondary skill level for playing sound]
        !!VR(ssLvNew):S(SKILL_EXPERT);
      !!el&i^H3_%z10_0_Hero%(hero)^=(FALSE)/i^H3_%z10_1_Hero%(hero)^=(FALSE);
        !!VR(ssLvNew):S(SKILL_ADVANCED);
      !!en;
    !!en;
  !!en;
; Alt Click - Set sec skill level to max
!!el&i^key_ctrl^=(FALSE)/i^key_shift^=(FALSE)/i^key_alt^;
  !!VR(ssLvNew):S5;

  !!if&i^Advanced_Classes_Mod_Active^;
    !!VRi^H3_%z10_0_Hero%(hero)^:S(TRUE);
    !!VRi^H3_%z10_1_Hero%(hero)^:S(TRUE);
  !!en;
!!el;
; LMB - dialogue for choosing levels of secondary skills
  !!if&i^Advanced_Classes_Mod_Active^=(FALSE);
    !!SN:H^secskill^/(ss)/(SKILL_NOT_LEARNED)/?z1;
    !!VR(choice:y):S1 Sd<<3;              [default choice - expert]
  !!en;

  !!if&i^Advanced_Classes_Mod_Active^;    [get master/grand master skill levels (ACM)]
    !!SN:T^trainer.acm.ss%(ss)^/?z1;

    !!if&(ssLv)=(SKILL_EXPERT);
      !!VR(ssLv)&i^H3_%z10_0_Hero%(hero)^/i^H3_%z10_1_Hero%(hero)^=(FALSE):S4;
      !!VR(ssLv)&i^H3_%z10_0_Hero%(hero)^/i^H3_%z10_1_Hero%(hero)^:S5;
    !!en;

    !!VR(choice:y):S1 Sd<<5;              [default choice - grand master]
  !!en;

  !!SN:T^trainer.titleSs^/?z2/^ss^/z1/^hero^/s^trainer_heroName^ T^trainer.notLearned^/?z3 T^trainer.basic^/?z4 T^trainer.advanced^/?z5 T^trainer.expert^/?z6 T^trainer.chgMind^/?z7;

  !!if&i^Advanced_Classes_Mod_Active^=(FALSE);
    !!IF:G1/1/(choice)/2/3/4/5/6/7;
    !!FU(IntLog2):Pv1/?(ssLvNew);
    !!FU&(ssLvNew)=4:E;
  !!en;

  !!if&i^Advanced_Classes_Mod_Active^;
    !!SN:T^trainer.acm.master^/?z8 T^trainer.acm.grandMaster^/?z9;
    !!IF:G1/1/(choice)/2/3/4/5/6/8/9/7;
    !!FU(IntLog2):Pv1/?(ssLvNew);
    !!FU&(ssLvNew)=6:E;

    !!if&(ssLvNew)<=(SKILL_EXPERT);
      !!VRi^H3_%z10_0_Hero%(hero)^:S(FALSE);
      !!VRi^H3_%z10_1_Hero%(hero)^:S(FALSE);
    !!el&(ssLvNew)=4;                        [set up Master/Grand Master level of skills (ACM)]
      !!VRi^H3_%z10_0_Hero%(hero)^:S(TRUE);
      !!VRi^H3_%z10_1_Hero%(hero)^:S(FALSE);
    !!el&(ssLvNew)>=5;
      !!VRi^H3_%z10_0_Hero%(hero)^:S(TRUE);
      !!VRi^H3_%z10_1_Hero%(hero)^:S(TRUE);
    !!en;
  !!en;
!!en;

!!SN&(ssLv)<>(ssLvNew):P^NwHeroLv.wav^; [play sound if skill level was updated]
!!VR(ssLvNew):F(SKILL_NOT_LEARNED)/(SKILL_EXPERT); [fix excessive skill levels]
!!HE(hero):S(ss)/(ssLvNew);
!!FU(trainer_SetSecSkillCadre):P(ss)/(ssLvNew);

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^>=55/i^mouse_item^<=82/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!VR(ss:y):Si^mouse_item^ -55;
!!HEi^trainer_hero^:S(ss)/?(ssLv:y);
!!VR(ssLv):F0/3;                        [restrain ss lv - not comparible with ss level greater than expert]
!!SN:H^secskill^/(ss)/(ssLv)/?(ssDesc:z);
!!VR(ssLv):F1/3;                        [restrain ss lv - pic subtype donesn't work with not learn lv]
!!VR(picSubtype:y):S(ss) *3 +(ssLv) +2;
!!IF:Q1/(PIC_TYPE_SEC_SKILL)/(picSubtype)/4^%(ssDesc)^;

!?FU(trainer_SetSecSkillCadre);
!#VA(ss:x) (ssLv:x);

!!VR(hero:y):Si^trainer_hero^;
!!VR(ssItem:y):S(ss) +55;
!!VR(ssHighlight:y):S(ss) +168;
!!DL(TRAINER_MAIN_DLG)&(ssLv)<=(SKILL_ADVANCED):A(ssHighlight)/(DLG_CMD_SET_DEF_FRAME)/0/1; [not learned/basic/advanced - no highlight]
!!VR(ssCadInd:y):S(ss);

!!if&(ssLv)=(SKILL_NOT_LEARNED);
  !!VR(highlight:y):S0;
!!el&(ssLv)=(SKILL_BASIC);
  !!VR(highlight:y):S2;
!!el&(ssLv)=(SKILL_ADVANCED);
  !!VR(highlight:y):S3;
!!en;

!!if&(ssLv)=(SKILL_EXPERT)/i^Advanced_Classes_Mod_Active^=(FALSE);
  !!VR(highlight):S1;                   [Expert - Gold]
  !!VR(ssCadInd):S(ss) +28;
!!en;

!!if&(ssLv)=(SKILL_EXPERT)/i^Advanced_Classes_Mod_Active^;
  !!SN:Mi^acm_ssNames^/(ss)/?(ssName:z);

  !!if&i^H3_%(ssName)_0_Hero%(hero)^<>(TRUE)/i^H3_%(ssName)_1_Hero%(hero)^<>(TRUE);
    !!VR(highlight):S1;               [Expert - Gold]
  !!el&i^H3_%(ssName)_0_Hero%(hero)^/i^H3_%(ssName)_1_Hero%(hero)^<>(TRUE);
    !!VR(highlight):S4;               [Master - Green]
  !!el&i^H3_%(ssName)_0_Hero%(hero)^/i^H3_%(ssName)_1_Hero%(hero)^;
    !!VR(highlight):S5;               [Grand Master - Red]
    !!VR(ssCadInd):S(ss) +28;
  !!en;

  !!DO(AC_Set_SS_Description)/(SEC_SKILL_FIRST)/(SEC_SKILL_LAST)/1:P(hero); [Set new Skill descriptions for ACM]
  !!DO(AC_Set_SS_Names)/(SEC_SKILL_FIRST)/(SEC_SKILL_LAST)/1:P(hero);       [Set new Skill names for ACM]
!!en;

!!DL(TRAINER_MAIN_DLG):A(ssHighlight)/(DLG_CMD_SET_DEF_FRAME)/(highlight)/1;
!!DL(TRAINER_MAIN_DLG):A(ssItem)/(DLG_CMD_SET_DEF_FRAME)/(ssCadInd)/1;

***************** End Secondary Skills *****************

********************* Resources ************************

!?FU7780014;
; x1 player ID
!!OW:Rx1/x16/?y1;
!!VRzx2:M3/y1;                          [convert var to z]
!!DL(TRAINER_MAIN_DLG)&x16=0:A21/(DLG_CMD_SET_TEXT)/zx2/1;[change resources value in hints]
!!DL(TRAINER_MAIN_DLG)&x16=1:A22/(DLG_CMD_SET_TEXT)/zx2/1;
!!DL(TRAINER_MAIN_DLG)&x16=2:A23/(DLG_CMD_SET_TEXT)/zx2/1;
!!DL(TRAINER_MAIN_DLG)&x16=3:A24/(DLG_CMD_SET_TEXT)/zx2/1;
!!DL(TRAINER_MAIN_DLG)&x16=4:A25/(DLG_CMD_SET_TEXT)/zx2/1;
!!DL(TRAINER_MAIN_DLG)&x16=5:A26/(DLG_CMD_SET_TEXT)/zx2/1;
!!DL(TRAINER_MAIN_DLG)&x16=6:A27/(DLG_CMD_SET_TEXT)/zx2/1;
!!DL(TRAINER_MAIN_DLG)&x16=7/i^wog42_on^:A(TRAINER_MITHRIL_AREA)/(DLG_CMD_SET_TEXT)/zx2/1; [Archer - mithril]

!!if&i^wog42_on^=(FALSE);
  !!VRz30:S^^;
  !!DL(TRAINER_MAIN_DLG)&x16=7:A(TRAINER_MITHRIL_AREA)/(DLG_CMD_SET_TEXT)/z30/1;
!!en;

!!VRx2:+1;                              [increment for next loop]

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_action^=(MOUSE_LMB_PRESSED);
!!VRy30:S0;
!!VRy30&i^mouse_item^>=21/i^mouse_item^<=27:S1;
!!VRy30&i^wog42_on^/i^mouse_item^=(TRAINER_MITHRIL_AREA):S2;
!!FU&y30=0:E;

!!SN:W^trainer_player^/?y12;            [set current player]

!!if&y12<0;
  !!IF:M^%T(trainer.resNoPlayer)^;
  !!FU:E;
!!en;

!!VRy1&y30=1:Si^mouse_item^ -21;
!!VRy1&y30=2:S7;

; Ctrl click - increase resoure by 100 untis/gold by 1 million
!!if&i^key_ctrl^/i^key_shift^=(FALSE)/i^key_alt^=(FALSE);
  !!if&y1<>(RES_GOLD);
    !!OW:Ry12/y1/d100;
  !!el;
    !!OW:Ry12/y1/d1000000;
  !!en;
; Shift Click - reduce resoure by 100 untis/gold by 1 million
!!el&i^key_ctrl^=(FALSE)/i^key_shift^/i^key_alt^=(FALSE);
  !!if&y1<>(RES_GOLD);
    !!OW:Ry12/y1/d-100;
  !!el;
    !!OW:Ry12/y1/d-1000000;
  !!en;
; Alt Click - Set resoure as 10000/gold as 100000000
!!el&i^key_ctrl^=(FALSE)/i^key_shift^=(FALSE)/i^key_alt^;
  !!if&y1<>(RES_GOLD);
    !!OW:Ry12/y1/10000;
  !!el;
    !!OW:Ry12/y1/100000000;
  !!en;
; LMB - Dialogue for setting current resources
!!el;
  !!FU(trainer_GetTxtFileString):P^restypes.txt^/y1/?z5;

  !!if&y1<>(RES_GEMS);
    !!SN:T^trainer.much^/?z8;
  !!el;
    !!SN:T^trainer.many^/?z8;             [use "many" for gem]
  !!en;    

  !!SN:T^trainer.titleRes^/?z6/^qty^/z8/^res^/z5/^colour^/s^trainer_player^ T^trainer.legendRes^/?z7/^res^/z5;
  !!IF:D55/6/7/0/0/0/0/0;
  !!IF:E1/55;
  !!VRz1:H1;                              [**check if text entered, flag 1=1 if yes]
  !!FU|-1/v1<0:E;

  !!VRy2:Vz1;
  !!VRy2:F0/(INT_MAX);                    [restrain value]

  !!OW:Ry12/y1/y2;
!!en;

!!DO7780014/0/7/1:Py12/10;              [Archer - redraw resources with mithril]

!!SN:P^gold01.wav^;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_action^=(MOUSE_RMB_PRESSED); [RMB info]
!!VR(flag:y):S(FALSE);

!!if&i^mouse_item^>=21/i^mouse_item^<=27;
  !!VR(flag):S1;
!!el&i^wog42_on^/i^mouse_item^=(TRAINER_MITHRIL_AREA);
  !!VR(flag):S2;
!!en;

!!FU&(flag)=(FALSE):E;

!!if&(flag)=1;
  !!VR(resType:y):Si^mouse_item^ -21;
!!el&(flag)=2;
  !!VR(resType):S(RES_MITHRIL);
!!en;

!!FU(trainer_GetTxtFileString):P^restypes.txt^/(resType)/?(resStr:z);
!!OW:Ri^trainer_player^/(resType)/?(resQty:y);
!!IF:Q1/(resType)/(resQty)/4^%(resStr)^;

************************ End Resources *****************************

************************** HERO level ******************************

!?FU(trainer_RefreshHeroLevel);
!#VA(level:x);

!!VRz21:S^%(level)^;
!!DL(TRAINER_MAIN_DLG):A147/(DLG_CMD_SET_TEXT)/z21/1;    [do not change z21!]

; Reset hero level, primary skills (without artifacts) and secondary skills
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=1/i^mouse_action^=(MOUSE_LMB_PRESSED);
!!VR(hero:y):Si^trainer_hero^;
!!VRz3:Ss^trainer_heroName^;

!!SN:T^trainer.heroLvReset^/?z2/^hero^/z3;
!!IF:Q1/(PIC_TYPE_EXPERIENCE)/0/(PIC_TYPE_PRIM_SKILL_FIRST)/0/(PIC_TYPE_SEC_SKILL)/3/2^%z2^;
!!FU&-1:E;

!!HE(hero):E0/1;

!!re i/(SEC_SKILL_FIRST)/(SEC_SKILL_LAST);
  !!HE(hero):Si/(SKILL_NOT_LEARNED);
!!en;

!!FU(GetHeroPrimarySkillsWithoutArts):P(hero)/?(atk:y)/?(def:y)/?(pwr:y)/?(knl:y);
!!VR(pwr):-1;
!!VR(knl):-1;

!!HE(hero):Fd-(atk)/d-(def)/d-(pwr)/d-(knl);

!!FU(trainer_RefreshHeroLevel):P1;
!!FU(trainer_RefreshPrimSkills):P(hero);
!!FU(trainer_RefreshSecSkills):P(hero);
!!SN:P^trn_quest.wav^;
!!VRi^trainer_heroLv^:S1;               [reset hero level global var to 1]

; set hero level by entering number
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=147/i^mouse_action^=(MOUSE_LMB_PRESSED);
!!SN:T^trainer.titleHeroLv^/?z2/^hero^/s^trainer_heroName^ T^trainer.legendHeroLv^/?z3/^maxLeg^/(TRAINER_LEVEL_CAP_LEGIT)/^maxExt^/(TRAINER_LEVEL_CAP_EXTREME);
!!IF:D30/2/3/^^;
!!IF:E1/30;                             [1 = index of v, 30 = number of extended dialog]
!!VRz1:H1;                              [check if text entered, flag 1=1 if yes]
!!FU|-1/v1<0:E;                         [end function if empty or Esc]

!!VR(lv:y):Vz1;
!!VR(lv):F1/(TRAINER_LEVEL_CAP_EXTREME);
!!FU(trainer_GetFixedLv):P(lv)/(FALSE)/?(lvFixed:y);
!!FU(trainer_RefreshHeroLevel):P(lvFixed);                 [refresh interface]
!!VRi^trainer_heroLv^:S(lvFixed);

; set hero level by arrows
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^>=300/i^mouse_item^<=301/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!VR(lv:y):Vz21;

!!if&i^mouse_item^=300;
  !!VR(lv):-1;
  !!VR(isLvUp:y):S(FALSE);
!!el&i^mouse_item^=301;
  !!VR(lv):+1;
  !!VR(isLvUp):S(TRUE);
!!en;

!!FU(trainer_GetFixedLv):P(lv)/(isLvUp)/?(lvFixed:y);

!!FU(trainer_RefreshHeroLevel):P(lvFixed);
!!VRi^trainer_heroLv^:S(lvFixed);

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!FU&i^mouse_item^<>1/i^mouse_item^<>147:E;;

!!HEi^trainer_hero^:E?(exp:y)/?(lv:y)/1;
!!SN:T^trainer.heroLvDesc^/?(heroLvDesc:z)/^lv^/(lv);
!!IF:Q1/(PIC_TYPE_EXPERIENCE)/(exp)/4^%(heroLvDesc)^;

!?FU(trainer_CalcExpWithLevel); Custom levels
; x1 - level
; x2 - exp
!!UN:J1/?y1/d J1/12/?y2 J1/x1/?y3 J1/y1/?y4;
!!VRx2:Sy3;
!!FU&x1<=12:E;

!!VRx2:Sy2;
!!VRy4:S13;
!!UN:J1/y4/?y5; #5
!!VRx2:+y5;
!!VRy4:+1;
!!SN&y4<=x1:G5;
!!UN:J1/y1/?y5;

********************* End Hero Level *************************

********************* Primary Skills *************************
; Added support with Prima.dll
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^>219/i^mouse_item^<228/i^mouse_action^=(MOUSE_LMB_RELEASED); buttons adding priщary skills
!!VR(hero:y):Si^trainer_hero^;          [Archer - opimisation and compatiblity with prima.dll]
!!VR(item:y):Si^mouse_item^;

!!HE(hero)&(item)=220:Fd1/d/d/d;
!!HE(hero)&(item)=221:Fd/d1/d/d;
!!HE(hero)&(item)=222:Fd/d/d/d1;
!!HE(hero)&(item)=223:Fd/d/d1/d;
!!HE(hero)&(item)=224:Fd-1/d/d/d;
!!HE(hero)&(item)=225:Fd/d-1/d/d;
!!HE(hero)&(item)=226:Fd/d/d/d-1;
!!HE(hero)&(item)=227:Fd/d/d-1/d;

!!FU(trainer_RefreshPrimSkills):P(hero);

!?FU(trainer_RefreshPrimSkills);
!#VA(hero:x);

!!HE(hero):F?(atk:y)/?(def:y)/?(pwr:y)/?(knl:y);
!!VR(psCap:y):Si^trainer_primSkillCap^;

!!VRz16:M3/(atk);
!!VRz17:M3/(def);
!!VRz18:M3/(pwr);
!!VRz19:M3/(knl);

!!VRz16&(atk)=(psCap):S^{~green}%(atk){~}^; [value = cap]
!!VRz17&(def)=(psCap):S^{~green}%(def){~}^;
!!VRz18&(pwr)=(psCap):S^{~green}%(pwr){~}^;
!!VRz19&(knl)=(psCap):S^{~green}%(knl){~}^;

!!VRz16|(atk)<0/(atk)>(psCap):S^{~red}%(atk){~}^; [invalid values]
!!VRz17|(def)<0/(def)>(psCap):S^{~red}%(def){~}^;
!!VRz18|(pwr)<1/(pwr)>(psCap):S^{~red}%(pwr){~}^;
!!VRz19|(knl)<1/(knl)>(psCap):S^{~red}%(knl){~}^;

!!DL(TRAINER_MAIN_DLG):A141/(DLG_CMD_SET_TEXT)/z16/1 A142/(DLG_CMD_SET_TEXT)/z17/1 A143/(DLG_CMD_SET_TEXT)/z18/1 A144/(DLG_CMD_SET_TEXT)/z19/1;

; Show primary skills pop-ups
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!VR(flag:y):S(FALSE);                  [get clicked location]

!!if&i^mouse_item^>=15/i^mouse_item^<=18;
  !!VR(flag):S1;
!!el&i^mouse_item^>=141/i^mouse_item^<=144;
  !!VR(flag):S2;
!!en;

!!FU&(flag)=(FALSE):E;

!!if&(flag)=1;
  !!VR(psType:y):Si^mouse_item^ -15; [get primary skill type and pic type]
!!el&(flag)=2;
  !!VR(psType):Si^mouse_item^ -141;
!!en;

!!VR(psPicType:y):S(psType) +31;

!!FU(GetHeroPrimarySkillsWithoutArts):Pi^trainer_hero^/?(atk:y)/?(def:y)/?(pwr:y)/?(knl:y);

!!if&(psType)=(SKILL_ATTACK);
  !!VR(psValue:y):S(atk);
!!el&(psType)=(SKILL_DEFENSE);
  !!VR(psValue):S(def);
!!el&(psType)=(SKILL_POWER);
  !!VR(psValue):S(pwr);
!!el&(psType)=(SKILL_KNOWLEDGE);
  !!VR(psValue):S(knl);
!!en;

!!FU(trainer_GetTxtFileString):P^priskill.txt^/(psType)/?(primSkillName:z);
!!SN:T^trainer.basicPs^/?(basicPs:z)/^hero^/s^trainer_heroName^/^ps^/(primSkillName);
!!IF:Q1/34/(psValue)/4^%(basicPs)^;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_action^=(MOUSE_LMB_PRESSED);
!!VR(flag:y):S(FALSE);                  [get clicked location]

!!if&i^mouse_item^>=15/i^mouse_item^<=18;
  !!VR(flag):S1;
!!el&i^mouse_item^>=141/i^mouse_item^<=144;
  !!VR(flag):S2;
!!en;

!!FU&(flag)=(FALSE):E;

!!VR(hero:y):Si^trainer_hero^;
!!VR(psCap:y):Si^trainer_primSkillCap^;
!!HE(hero):F?(atk:y)/?(def:y)/?(pwr:y)/?(knl:y);

; Get the type of primary skills
!!if&(flag)=1;
  !!VR(psType:y):Si^mouse_item^ -15;
!!el&(flag)=2;
  !!VR(psType):Si^mouse_item^ -141;
!!en;

; Ctrl Click - increase 10 primary skill points
!!if&i^key_ctrl^/i^key_shift^=(FALSE)/i^key_alt^=(FALSE);
  !!if&(psType)=(SKILL_ATTACK);
    !!HE(hero):Fd10/d/d/d;
  !!el&(psType)=(SKILL_DEFENSE);
    !!HE(hero):Fd/d10/d/d;
  !!el&(psType)=(SKILL_POWER);
    !!HE(hero):Fd/d/d10/d;
  !!el&(psType)=(SKILL_KNOWLEDGE);
    !!HE(hero):Fd/d/d/d10;
  !!en;

  !!SN:P^button.wav^;
; Shift Click - decrease 10 primary skill points
!!el&i^key_ctrl^=(FALSE)/i^key_shift^/i^key_alt^=(FALSE);
  !!if&(psType)=(SKILL_ATTACK);
    !!HE(hero):Fd-10/d/d/d;
  !!el&(psType)=(SKILL_DEFENSE);
    !!HE(hero):Fd/d-10/d/d;
  !!el&(psType)=(SKILL_POWER);
    !!HE(hero):Fd/d/d-10/d;
  !!el&(psType)=(SKILL_KNOWLEDGE);
    !!HE(hero):Fd/d/d/d-10;
  !!en;

  !!SN:P^button.wav^;
; Alt Click - set primary skill to max
!!el&i^key_ctrl^=(FALSE)/i^key_shift^=(FALSE)/i^key_alt^;
  !!if&(psType)=(SKILL_ATTACK);
    !!HE(hero):F(psCap)/d/d/d;
  !!el&(psType)=(SKILL_DEFENSE);
    !!HE(hero):Fd/(psCap)/d/d;
  !!el&(psType)=(SKILL_POWER);
    !!HE(hero):Fd/d/(psCap)/d;
  !!el&(psType)=(SKILL_KNOWLEDGE);
    !!HE(hero):Fd/d/d/(psCap);
  !!en;

  !!SN:P^button.wav^;
; LMB- Dialogue for input needed Primary skill value
!!el;
  !!FU(trainer_GetTxtFileString):P^priskill.txt^/(psType)/?z2;

  !!if|(psType)=(SKILL_ATTACK)/(psType)=(SKILL_DEFENSE);
    !!VR(psMin:y):S0;
  !!el;
    !!VR(psMin):S1;
  !!en;

  !!SN:T^trainer.titlePs^/?z4/^ps^/z2/^hero^/s^trainer_heroName^ T^trainer.legendPs^/?z5/^ps^/z2/^min^/(psMin)/^max^/(psCap);
  !!IF:D30/4/5/^^;              [get primary skill value input]
  !!IF:E1/30;
  !!VRz1:H1;
  !!FU|-1/v1<0:E;

  !!VR(psValue:y):Vz1;

  !!if|(psType)=(SKILL_ATTACK)/(psType)=(SKILL_DEFENSE);
    !!VR(psValue:y):F0/(psCap);
  !!el;
    !!VR(psValue):F1/(psCap);
  !!en;

  ; Set new primary skill values
  !!if&(psType)=(SKILL_ATTACK);
    !!HE(hero):F(psValue)/d/d/d;
  !!el&(psType)=(SKILL_DEFENSE);
    !!HE(hero):Fd/(psValue)/d/d;
  !!el&(psType)=(SKILL_POWER);
    !!HE(hero):Fd/d/(psValue)/d;
  !!el&(psType)=(SKILL_KNOWLEDGE);
    !!HE(hero):Fd/d/d/(psValue);
  !!en;
!!en;

!!HE(hero):F?(atkNew:y)/?(defNew:y)/?(pwrNew:y)/?(knlNew:y);

!!if|(atk)<>(atkNew)/(def)<>(defNew)/(pwr)<>(pwrNew)/(knl)<>(knlNew);
  !!FU(trainer_RefreshPrimSkills):P(hero);
!!en;

!?FU(trainer_GetPrimSkillCap);
!!UN:C4342141/1/?(value:y);
!!SN:L^prima.dll^/?(prima:y);

; If the bin patch display primary skills over 99 is enabeld, it overrides prima and set max primary skills at 126
!!if&(prima)<>0;
  !!if&(value)<>127;
    !!VRi^trainer_primSkillCap^:S(TRAINER_PRIMSKILL_CAP_PRIMA);
  !!el;
    !!VRi^trainer_primSkillCap^:S126;
  !!en;
!!el;
  !!if&(value)=127;
    !!VRi^trainer_primSkillCap^:S(TRAINER_PRIMSKILL_CAP_BINPATCH);
  !!el;
    !!VRi^trainer_primSkillCap^:S(TRAINER_PRIMSKILL_CAP_ORIGIN);
  !!en;
!!en;

******************** End primary skills ***********************

************************ HERO ARMY ****************************
; Add new creatures from the table to the hero's army
!?FU(trainer_RefeshHeroArmy);
!#VA(hero:x);

!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!HE(hero):C0/i/?(mon:y)/?(qty:y)/?(exp:y);
  !!VR(monCad:y):Si +100;               [get mon cadre ID]
  !!VR(hintCad:y):Si +161;              [get hint text ID]
  !!VR(swordCad:y):Si +400;             [get ID of swords item]
  !!VR(henchCad:y):Si +228;             [get ID of henchman button]

  !!UN:P(WOG_OPT_STACK_EXPERIENCE)/?(stackExpOn:y); [check if stack exp enabled]
  !!DL(TRAINER_MAIN_DLG)&(stackExpOn)=(FALSE):A(swordCad)/(DLG_CMD_SET_DEF_FRAME)/0/1;

  !!UN:P49/?(henchOn:y);
  !!DL(TRAINER_MAIN_DLG)&(henchOn)=(FALSE):E(henchCad)/0;

  !!if&(mon)=(NO_MON);
    !!DL(TRAINER_MAIN_DLG):A(monCad)/(DLG_CMD_SET_DEF_FRAME)/1/1;

    !!DL(TRAINER_MAIN_DLG):A(swordCad)/(DLG_CMD_SET_DEF_FRAME)/0/1;
    !!DL(TRAINER_MAIN_DLG):E(henchCad)/0;

    !!VRz30:S^^;
    !!DL(TRAINER_MAIN_DLG):A(hintCad)/(DLG_CMD_SET_TEXT)/z30/1;

    !!DL(TRAINER_MAIN_DLG):H(monCad)/z30;
    !!DL(TRAINER_MAIN_DLG):H(hintCad)/z30;[DL:H doesn't work on ^^]
    !!DL(TRAINER_MAIN_DLG):H(swordCad)/z30;
  !!el;
    !!VR(monCadInd:y):S(mon) +2;
    !!DL(TRAINER_MAIN_DLG):A(monCad)/(DLG_CMD_SET_DEF_FRAME)/(monCadInd)/1;

    !!VRz3:M3/(qty);
    !!DL(TRAINER_MAIN_DLG):A(hintCad)/(DLG_CMD_SET_TEXT)/z3/1;

    !!MA:L(mon)/?(monLv:y);               [Monster level]
    !!VR(monLv):+1;                       [Add 1 to monster level]
    !!FU(trainer_GetMonRank):P(mon)/(exp)/?(rank:y);
    !!FU(trainer_RefreshRank):P(rank)/(swordCad);

    !!SN:T^trainer.hintMonQty^/?z34;
    !!DL(TRAINER_MAIN_DLG):H(monCad)/z34;
    !!DL(TRAINER_MAIN_DLG):H(hintCad)/z34;
    !!DL(TRAINER_MAIN_DLG):H(swordCad)/z34;

    !!DL(TRAINER_MAIN_DLG):E(henchCad)/1;
  !!en;
!!en;

!?FU(trainer_GetMonRank);
!#VA(mon:x) (exp:x) (rank:x);

; Get the exp of R11
!!EA(mon):L?(monExpR10:y) P?(monExpTop:y);
!!VR(monExpR11:y):S(monExpR10) +(monExpTop);

!!if&(exp)=(monExpR11);
  !!VR(rank):S11;
!!el;
  !!SN:E7503648/1/(mon)/(exp);          [Hawaiing - export result to v1, returns R11 as R10]
  !!VR(rank):Sv1;
!!en;

; Monster Table
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=8/i^mouse_action^=(MOUSE_LMB_RELEASED); [browse towns/right button]
!!VR(page:y):Si^trainer_monTablePage^;

!!if&(page)<10;
  !!VR(pageNew:y):S(page) +1;
; if last page, return to the first
!!el&(page)=10;
  !!VR(pageNew):S(TOWN_CASTLE);
!!en;

!!FU(trainer_RefreshMonTable):P(pageNew);
!!VRi^trainer_monTablePage^:S(pageNew);

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=7/i^mouse_action^=(MOUSE_LMB_RELEASED); [browse towns/left button]
!!VR(page:y):Si^trainer_monTablePage^;

; if first page, jump to the last
!!if&(page)=(TOWN_CASTLE);
  !!VR(pageNew:y):S10;
!!el&(page)>(TOWN_CASTLE);
  !!VR(pageNew):S(page) -1;
!!en;

!!FU(trainer_RefreshMonTable):P(pageNew);
!!VRi^trainer_monTablePage^:S(pageNew);

!?FU(trainer_RefreshMonTable);
!#VA(page:x);

!!if&(page)<=(TOWN_LAST_WOG);
  !!DL(TRAINER_MAIN_DLG):A3/(DLG_CMD_SET_DEF)/^itpt.def^;
  !!VR(townCadre:y):S(page) *2;
!!el(page)>(TOWN_LAST_WOG);
  ; Neutrals
  !!DL(TRAINER_MAIN_DLG):A3/(DLG_CMD_SET_DEF)/^trn_neut.def^;
  !!VR(townCadre):S(page) -1 %2;
!!en;

!!DL(TRAINER_MAIN_DLG):A3/(DLG_CMD_SET_DEF_FRAME)/(townCadre);

!!re (item:y)/83/98;
  !!FU(trainer_GetMonOfTheTable):P(page)/(item)/?(mon:y);
  !!VR(monCad:y):S(mon) +2;
  !!DL(TRAINER_MAIN_DLG):A(item)/(DLG_CMD_SET_DEF_FRAME)/(monCad);
!!en;

!?FU(trainer_GetMonOfTheTable);
!#VA(page:x) (item:x) (mon:x);

!!VR(item):-83;

!!if&(page)<=(TOWN_CONFLUX);
  !!if&(page)<=(TOWN_FORTRESS);
    !!VR(mon)&(item)<=13:S(page) *14 +(item);

    ; Fix the mess of fortress
    !!if&(page)=(TOWN_FORTRESS);
      !!VR(mon)&(item)=4:S(MON_SERPENT_FLY);
      !!VR(mon)&(item)=5:S(MON_DRAGON_FLY);
      !!VR(mon)&(item)=6:S(MON_BASILISK);
      !!VR(mon)&(item)=7:S(MON_GREATER_BASILISK);
      !!VR(mon)&(item)=8:S(MON_GORGON);
      !!VR(mon)&(item)=9:S(MON_MIGHTY_GORGON);
    !!en;
  !!el&(page)=(TOWN_CONFLUX);
    !!VR(mon)&(item)=0:S(MON_PIXIE);
    !!VR(mon)&(item)=1:S(MON_SPRITE);
    !!VR(mon)&(item)=2:S(MON_AIR_ELEMENTAL);
    !!VR(mon)&(item)=3:S(MON_STORM_ELEMENTAL);
    !!VR(mon)&(item)=4:S(MON_WATER_ELEMENTAL);
    !!VR(mon)&(item)=5:S(MON_ICE_ELEMENTAL);
    !!VR(mon)&(item)=6:S(MON_FIRE_ELEMENTAL);
    !!VR(mon)&(item)=7:S(MON_ENERGY_ELEMENTAL);
    !!VR(mon)&(item)=8:S(MON_EARTH_ELEMENTAL);
    !!VR(mon)&(item)=9:S(MON_MAGMA_ELEMENTAL);
    !!VR(mon)&(item)=10:S(MON_PSYCHIC_ELEMENTAL);
    !!VR(mon)&(item)=11:S(MON_MAGIC_ELEMENTAL);
    !!VR(mon)&(item)=12:S(MON_FIREBIRD);
    !!VR(mon)&(item)=13:S(MON_PHOENIX);
  !!en;

  !!VR(mon)&(item)=14:S(MON_SUPREME_ARCHANGEL) +(page);

  ; War Machines and Emissaries
  !!if&(item)=15;
    !!VR(mon)|(page)=(TOWN_CASTLE)/(page)=(TOWN_DUNGEON):S(MON_BALLISTA);
    !!VR(mon)|(page)=(TOWN_RAMPART)/(page)=(TOWN_NECROPOLIS):S(MON_FIRST_AID_TENT);
    !!VR(mon)|(page)=(TOWN_TOWER)/(page)=(TOWN_INFERNO):S(MON_AMMO_CART);
    !!VR(mon)&(page)=(TOWN_STRONGHOLD):S(MON_EMISSARY_OF_WAR);
    !!VR(mon)&(page)=(TOWN_FORTRESS):S(MON_EMISSARY_OF_PEACE);
    !!VR(mon)&(page)=(TOWN_CONFLUX):S(MON_EMISSARY_OF_MANA);
  !!en;

!!el&(page)=9;
  !!VR(mon)&(item)=0:S(MON_GOLD_GOLEM);
  !!VR(mon)&(item)=1:S(MON_DIAMOND_GOLEM);
  !!VR(mon)&(item)>=2/(item)<=14:S(MON_AZURE_DRAGON) +(item) -2;

  ; Emissary of Lore
  !!VR(mon)&(item)=15:S(MON_EMISSARY_OF_LORE);

!!el&(page)=10;
  !!VR(mon)&(item)=0:S(MON_GHOST);
  !!VR(mon)&(item)>=1/(item)<=10:S(MON_FIRE_MESSENGER) +(item) -1;
  !!VR(mon)&(item)>=11/(item)<=15:S(MON_SYLVAN_CENTAUR) +(item) -11;
!!en;

; Right-click to get info of the monster
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^>=83/i^mouse_item^<=98/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!FU(trainer_GetMonOfTheTable):Pi^trainer_monTablePage^/i^mouse_item^/?(mon:y);
!!SN:H^monname^/(mon)/0/?(monName:z);
!!IF:Q1/(PIC_TYPE_MONSTER)/(mon)/4^%(monName)^;

; Click to transfer creatures from the table to the hero's army
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^>82/i^mouse_item^<99/i^mouse_action^=(MOUSE_LMB_PRESSED);
!!FU(trainer_GetMonOfTheTable):Pi^trainer_monTablePage^/i^mouse_item^/?(mon:y);
!!SN:H^monname^/(mon)/0/?z3;

!!VR(hero:y):Si^trainer_hero^;

!!if|(mon)<(MON_CATAPULT)/(mon)>(MON_ARROW_TOWERS);
  ; Add creatures to the hero's army if not War Machines
  !!SN:T^trainer.titleAddMon^/?z6/^mon^/z3/^hero^/s^trainer_heroName^ T^trainer.legendAddMon^/?z7;
  !!IF:D55/6/7/0/0/0/0/0;
  !!IF:E1/55;
  !!VRz1:H1; **check if text entered, flag 1=1 if yes
  !!FU|-1/v1<0:E;

  !!VR(input:y):Vz1;
  !!VR(input):F0/(INT_MAX);               [restrain value]
  !!FU&(input)=0:E;

  !!HE(hero):C2/(mon)/(input)/(TRUE);     [ask if slots are all occupied]
  !!FU(trainer_RefeshHeroArmy):P(hero);              [refresh hero army]
!!el;
  ; Add War Machine to the hero's artifact slot
  !!if&(mon)=(MON_BALLISTA);
    !!VR(art:y):S(ART_BALLISTA);
    !!HE(hero):A1/?(artOwned:y)/(ART_SLOT_BALLISTA);
  !!el&(mon)=(MON_FIRST_AID_TENT);
    !!VR(art):S(ART_FIRST_AID_TENT);
    !!HE(hero):A1/?(artOwned)/(ART_SLOT_FIRST_AID_TENT);
  !!el&(mon)=(MON_AMMO_CART);
    !!VR(art):S(ART_AMMO_CART);
    !!HE(hero):A1/?(artOwned)/(ART_SLOT_AMMO_CART);
  !!en;

  !!if&(artOwned)>=(ART_BALLISTA);
    ; info if the hero has got the WM
    !!SN:T^trainer.WMOwned^/?z8/^mon^/z3/^hero^/s^trainer_heroName^;
    !!IF:Q1/(PIC_TYPE_MONSTER)/(mon)/1^%z8^;
  !!el;
    ; Ask to add in WM to the hero's army if not owned
    !!SN:T^trainer.heroArt^/?z8/^art^/z3/^hero^/s^trainer_heroName^;
    !!IF:Q1/(PIC_TYPE_MONSTER)/(mon)/2^%z8^;

    !!if&1;
      !!HE(hero):A4/(art);
      !!FU(trainer_PlayArtSound):P;
    !!en;
  !!en;
!!en;

!?FU(trainer_RefreshRank);              [x1 = id of sword item]
!#VA(rank:x) (swordCad:x);

!!if&(rank)>=10;
  !!DL(TRAINER_MAIN_DLG):A(swordCad)/(DLG_CMD_SET_DEF_FRAME)/1/0; set
!!el;
  !!DL(TRAINER_MAIN_DLG):A(swordCad)/(DLG_CMD_SET_DEF_FRAME)/0/0;                    [Archer - remove sword if lower than Ace]
!!en;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=124/i^mouse_action^=(MOUSE_LMB_RELEASED); [custom monsters]
; Get the last monster ID
; Warning: Need to be defined in every mod that has extended monster ID
!!VR(hero:y):Si^trainer_hero^;
!!FU(GetMaxMonsterId):P?(lastMon:y);

!!SN:T^trainer.titleCustMon^/?z2/^hero^/s^trainer_heroName^ T^trainer.legendCustMon^/?z3/^max^/(lastMon);
!!IF:D30/2/3/^^;
!!IF:E1/30;                             [1 = index of v, 30 = number of extended dialog]
!!VRz1:H1;                              [check if text entered, flag 1=1 if yes]
!!FU|-1/v1<0:E;                         [end function if empty or Esc]

!!VR(mon:y):Vz1;
!!FU(trainer_CheckZ1FirstCharacterIsNum):P?(result:y);

!!if&(result)/(mon)>=(MON_FIRST)/(mon)<=(lastMon);
  !!FU(trainer_AddMonInputQty):P(mon);
  !!FU(trainer_RefeshHeroArmy):P(hero);   [refresh hero army]
  !!FU:E;
!!en;

!!re i/(MON_FIRST)/(lastMon);
  !!SN:H^monname^/i/0/?z2 H^monname^/i/1/?z3;

  !!br|z1=z2/z1=z3;
!!en;

!!if&i<=(lastMon);
  !!FU(trainer_AddMonInputQty):Pi;
  !!FU(trainer_RefeshHeroArmy):P(hero);   [refresh hero army]
!!el;
  !!IF:M^%T(trainer.noMon)^;
!!en;

!?FU(trainer_AddMonInputQty);
!#VA(mon:x);
!!SN:H^monname^/(mon)/1/?z4;

!!SN:T^trainer.titleCustMonQty^/?z2/^mon^/z4/^hero^/s^trainer_heroName^ T^trainer.legendCustMonQty^/?z3;
!!IF:D30/2/3/^^;
!!IF:E1/30;                             [1 = index of v, 30 = number of extended dialog]
!!VRz1:H1;                              [check if text entered, flag 1=1 if yes]
!!FU|-1/v1<0:E;                         [end function if empty or Esc]

!!VR(qty:y):Vz1;
!!VR(qty):F0/(INT_MAX);

!!HEi^trainer_hero^&(qty)>0:C2/(mon)/(qty)/1;

**************************** End Army ************************************

**************************** Artifacts ***********************************
; 526-540 artifacts graphics
; 426-440 artifacts cadres
!?FU(trainer_RefreshArtTable);
!#VA(page:x);

!!VR(hero:y):Si^trainer_hero^;

!!re (item:y)/526/540;
  !!FU(trainer_GetArtOfTheTable):P(page)/(item)/?(art:y);
  !!DL(TRAINER_MAIN_DLG):A(item)/(DLG_CMD_SET_DEF_FRAME)/(art);

  !!VR(highlight:y):S(item) -100;

  ; Check if the hero has the artifact if the artifact is not scroll
  !!if&(art)<>(ART_SPELL_SCROLL);
    !!HE(hero):A2/(art)/?(owned:y)/?(equipped:y);
  !!el;
    ; Check if the hero has the actual scroll if the artifact is scroll
    !!re (scroll:y)/1001/1070;
      !!HE(hero):A2/(scroll)/?(owned)/?(equipped);

      !!br&(owned)>0;
    !!en;
  !!en;

  !!if&(owned)>0;
    !!DL(TRAINER_MAIN_DLG):A(highlight)/(DLG_CMD_SET_DEF_FRAME)/1/1;
  !!el;
    !!DL(TRAINER_MAIN_DLG):A(highlight)/(DLG_CMD_SET_DEF_FRAME)/0/1;    
  !!en;
!!en;

!?FU(trainer_GetArtOfTheTable);
!#VA(page:x) (item:x) (art:x);

!!VR(item):-526;

!!if&(page)<9;
  !!VR(art):S(page) *15 +(ART_CENTAUR_AXE) +(item);
!!el&(page)=9;
  !!VR(art)&(item)<2:S(page) *15 +(ART_CENTAUR_AXE) +(item);
  ; Skip highlight and lock
  !!VR(art)&(item)>=2:S(page) *15 +(ART_CENTAUR_AXE) +(item) +2;
!!el&(page)=10;
  !!VR(art)&(item)<12:S(page) *15 +(ART_CENTAUR_AXE) +(item) +2;

  !!VR(art)&(item)>=12:S(item) -12;
!!en;

; arts button right
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=108/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!VR(page:y):Si^trainer_artTablePage^;

!!if&(page)<10;
  !!VR(pageNew:y):S(page) +1;
; if last page, return to the first
!!el&(page)=10;
  !!VR(pageNew):S0;
!!en;

!!FU(trainer_RefreshArtTable):P(pageNew);
!!VRi^trainer_artTablePage^:S(pageNew);

; arts button left
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=107/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!VR(page:y):Si^trainer_artTablePage^;

!!if&(page)=0;
  !!VR(pageNew:y):S10; 
; if last page, return to the first
!!el&(page)>0;
  !!VR(pageNew):S(page) -1;
!!en;

!!FU(trainer_RefreshArtTable):P(pageNew);
!!VRi^trainer_artTablePage^:S(pageNew);

; Click to give artifacts to the hero
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^>=426/i^mouse_item^<=440/i^mouse_action^=(MOUSE_LMB_PRESSED);
!!VR(hero:y):Si^trainer_hero^;
!!VR(item:y):Si^mouse_item^ +100;
!!FU(trainer_GetArtOfTheTable):Pi^trainer_artTablePage^/(item)/?(art:y);

!!if&(art)<>(ART_SPELL_BOOK)/(art)<>(ART_SPELL_SCROLL);
  !!FU(trainer_AskToPassArtToHero):P(hero)/(art);
!!el&(art)=(ART_SPELL_BOOK);
  !!HE(hero):A2/(ART_SPELL_BOOK)/?(owned:y)/?(equipped:y);

  !!if&(owned)>0;
    !!SN:H^art^/(ART_SPELL_BOOK)/0/?(spellBookName:z) T^trainer.spellBookOwned^/?(spellBookOwned:z)/^hero^/s^trainer_heroName^/^art^/(spellBookName);
    !!IF:Q1/(PIC_TYPE_ART)/(ART_SPELL_BOOK)/1^%(spellBookOwned)^;
  !!el;
    !!FU(trainer_AskToPassArtToHero):P(hero)/(art);
  !!en;
!!el&(art)=(ART_SPELL_SCROLL);
  !!FU(trainer_GiveSpellScroll):P(hero);
!!en;

!?FU(trainer_AskToPassArtToHero);       [pass artifact to the hero with artifact table]
!#VA(hero:x) (art:x);

!!SN:H^art^/(art)/0/?(artName:z) T^trainer.heroArt^/?(heroArtStr:z)/^art^/(artName)/^hero^/s^trainer_heroName^;
!!IF:Q1/8/(art)/2^%(heroArtStr)^;

!!if&1;
  !!HE(hero):A4/(art);                       [auto equipped]
  !!DL(TRAINER_MAIN_DLG):Ai^mouse_item^/(DLG_CMD_SET_DEF_FRAME)/1/0;
  !!FU(trainer_PlayArtSound):P;
  !!FU(trainer_RefreshPrimSkills):P(hero); [refresh hero's primary skills as they might be changed]
!!en;

; Right-click to get the info of the artifact
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^>=426/i^mouse_item^<=440/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!VR(item:y):Si^mouse_item^ +100;
!!FU(trainer_GetArtOfTheTable):Pi^trainer_artTablePage^/(item)/?(art:y);
!!SN:H^art^/(art)/1/?(artDesc:z);
!!IF:Q1/(PIC_TYPE_ART)/(art)/4^%(artDesc)^;

!?FU(trainer_PlayArtSound);
!!VR(randNum:y):S1 R6;

!!SN:P^pickup0%(randNum).wav^;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=125/i^mouse_action^=(MOUSE_LMB_RELEASED); [custom artifacts]
; Get the last artifact ID
; Warning: GetMaxArtifactId has to be defined in mods! It is not part of EEF
!!VR(hero:y):Si^trainer_hero^;
!!FU(GetMaxArtifactId):P?(lastArt:y);
!!VR(lastArt):F(ART_LAST_WOG)/1000;     [compatiblity settings]

!!SN:T^trainer.titleCustArt^/?z2/^hero^/s^trainer_heroName^ T^trainer.legendCustArt^/?z3/^max^/(lastArt);
!!IF:D30/2/3/^^;
!!IF:E1/30;                             [1 = index of v, 30 = number of extended dialog]
!!VRz1:H1;                              [check if text entered, flag 1=1 if yes]
!!FU|-1/v1<0:E;                         [end function if empty or Esc]

!!VR(art:y):Vz1;

!!FU(trainer_CheckZ1FirstCharacterIsNum):P?(result:y);

; Add in artifact with ID if the first character is a number
!!if&(result)/(art)>=(ART_FIRST)/(art)<=(lastArt);
  !!if&(art)<>(ART_SPELL_SCROLL);
    !!FU(trainer_PassArtToHero):P(hero)/(art);
  !!el;
    !!FU(trainer_GiveSpellScroll):P(hero);
  !!en;
!!el;
  ; Add in artifact via name if the first chracter is not a number
  !!re i/(ART_FIRST)/(lastArt);
    !!SN:H^art^/i/0/?z2;

    !!br&z1=z2;
  !!en;

  !!if&i<=(lastArt);
    !!if&i<>(ART_SPELL_SCROLL);
      !!FU(trainer_PassArtToHero):P(hero)/i;
    !!el;
      !!FU(trainer_GiveSpellScroll):P(hero);
    !!en;
  !!el;
    !!IF:M^%T(trainer.noArt)^;
  !!en;
!!en;

!?FU(trainer_ShowArtDesc);
!#VA(art:x);

!!SN:H^art^/(art)/1/?(artDesc:z);
!!IF:Q1/(PIC_TYPE_ART)/(art)/1^%(artDesc)^;

!?FU(trainer_GiveSpellScroll);
!#VA(hero:x);

!!SN:T^trainer.titleScroll^/?z2/^hero^/s^trainer_heroName^ T^trainer.legendScroll^/?z3/^max^/(SPELL_LAST_WOG);
!!IF:D30/2/3/^^;
!!IF:E1/30;                             [1 = index of v, 30 = number of extended dialog]
!!VRz1:H1;                              [check if text entered, flag 1=1 if yes]
!!FU|-1/v1<0:E;                         [end function if empty or Esc]

!!VR(spell:y):Vz1;
!!FU(trainer_CheckZ1FirstCharacterIsNum):P?(result:y);

!!if&(result)/(spell)>=(SPELL_FIRST)/(spell)<=(SPELL_LAST_WOG);
  !!VR(art:y):S(spell) +1001;
  !!FU(trainer_PassArtToHero):P(hero)/(art);
!!el;
  !!re i/(SPELL_FIRST)/(SPELL_LAST_WOG);
    !!SN:H^spell^/i/(SPELL_TEXT_NAME)/?z2;

    !!br&z1=z2;
  !!en;

  !!if&i<=(SPELL_LAST_WOG);
    !!FU(trainer_PassArtToHero):P(hero)/i;
  !!el;
    !!IF:M^%T(trainer.noScroll)^;
  !!en;
!!en;

!?FU(trainer_PassArtToHero);            [pass artifact to the hero with custom artifact feature]
!#VA(hero:x) (art:x);

!!HE(hero):A4/(art);
!!FU(trainer_RefreshArtTable):Pi^trainer_artTablePage^;
!!FU(trainer_ShowArtDesc)&(art)<1000:P(art);
!!FU(trainer_PlayArtSound):P;

!!FU(trainer_RefreshPrimSkills):Pi^trainer_hero^; [refresh hero's primary skills as they might be changed]

***************************** End artifacts ********************************

******************** Give movement, mana and reveal map ********************
; Movement
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=32/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!VR(hero:y):Si^trainer_hero^;
!!HE(hero):W?(movement:y)/1;
!!SN:T^trainer.titleMovement^/?z6/^hero^/s^trainer_heroName^/^movement^/(movement) T^trainer.legendMovement^/?z7;

!!IF:D55/6/7/0/0/0/0/0;
!!IF:E1/55;
!!VRz1:H1; **check if text entered, flag 1=1 if yes
!!FU|-1/v1<0:E;

!!VR(input:y):Vz1;

!!if&(input)<>0;
  !!VR(input):F-20000000/20000000;      [restrain value (INT_MAX)/100]
  !!VR(bonusMove:y):S(input) *100;
  !!HE(hero):Wd(bonusMove)/1;
!!el;
  !!HE(hero):W0/1;                      [remove all movement points if 0 was input]
!!en;

!!FU(trainer_RefreshMoveBar):P(hero);

!!SN:P^Horse00.wav^;

; Show current movement points
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=30/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!VR(hero:y):Si^trainer_hero^;
!!HE(hero):W?(movement:y)/1;
!!SN:T^trainer.currMovement^/?(currMoveStr:z)/^hero^/s^trainer_heroName^ T^trainer.movePoints^/?(movePoints:z)/^movement^/(movement) H^art^/(ART_BOOTS_OF_SPEED)/0/^%(movePoints)^;
!!IF:Q1/(PIC_TYPE_ART)/(ART_BOOTS_OF_SPEED)/4^%(currMoveStr)^;
!!SN:H^-art^/(ART_BOOTS_OF_SPEED)/0/^^; [restore the name of artifact]

; Mana
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=33/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!VR(hero:y):Si^trainer_hero^;
!!HE(hero):I?(mana:y)/1;
!!SN:T^trainer.titleMana^/?z6/^hero^/s^trainer_heroName^/^mana^/(mana) T^trainer.legendMana^/?z7;

!!IF:D55/6/7/0/0/0/0/0;
!!IF:E1/55;
!!VRz1:H1; **check if text entered, flag 1=1 if yes
!!FU|-1/v1<0:E;

!!VR(input:y):Vz1;

!!if&(input)<>0;
  !!HE(hero):I?(currMana:y)/1;
  !!VR(manaNew:y):S(input) +(currMana);
  !!VR(manaNew):F0/(BITS_15_MASK);      [restrain value]
  !!HE(hero):I(manaNew)/1;
!!el;
  !!HE(hero):I0/1;                      [remove all spell points if 0 was input]
!!en;

!!FU(trainer_RefreshManaBar):P(hero);

!!SN:P^star2.wav^;

; Show current mana
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=31/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!VR(hero:y):Si^trainer_hero^;
!!HE(hero):I?(mana:y)/1;
!!SN:T^trainer.currMana^/?(currManaStr:z)/^hero^/s^trainer_heroName^;
!!IF:Q1/(PIC_TYPE_SPELL_POINTS)/(mana)/4^%(currManaStr)^;

; Reveal the map
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=29/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!SN:H^art^/(ART_SPYGLASS)/0/^^;        [spyglass name is empty]

!!if&i^trainer_player^=(NO_PLAYER);
  !!IF:M^%T(trainer.revealNoPlayer)^;
  !!FU:E;
!!en;

!!SN:T^trainer.reveal^/?z2/^colour^/s^trainer_player^;
!!IF:Q1/8/53/2^%z2^;
!!SN:H^-art^/(ART_SPYGLASS)/0/^^;       [restores spyglass name]
!!FU&-1:E;

!!UN:X?i/?j; get map size
!!VRv2&i=36:C18/25;
!!VRv2&i=72:C36/50;
!!VRv2&i=108:C54/80;
!!VRv2&i=144:C77/110;
!!VRv2&i>144:C126/175;
!!UN:Sv2/v2/0/i^trainer_player^/v3;
!!UN&j>0:Sv2/v2/1/i^trainer_player^/v3;

!!SN:P^Lighthouse.wav^;

****************** End movement, mana and reveal map ************************

******************* Give any rank to the creatures **************************
; Stack experience
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^>153/i^mouse_item^<161/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!UN:P(WOG_OPT_STACK_EXPERIENCE)/?(stackExpOn:y); check if stack exp enabled

!!if&(stackExpOn)=(FALSE);
  !!IF:M^%T(trainer.rankOff)^;
  !!FU:E;
!!en;

!!SN:W^trainer_hero^/?(hero:y);
!!VR(slot:y):Si^mouse_item^ -154; get hero slot
!!HE(hero):C0/(slot)/?(mon:y)/?(qty:y)/?(exp:y); y5 stack experience

!!if&(mon)<=(NO_MON);
  !!IF:M^%T(trainer.rankNoArmy)^;
  !!FU:E;
!!en;

!!FU(trainer_GetMonRank):P(mon)/(exp)/?(rank:y);

!!if&(qty)<=1;
  !!SN:H^monname^/(mon)/0/?z6;
!!el;
  !!SN:H^monname^/(mon)/1/?z6;
!!en;

!!SN:T^trainer.titleRank^/?z4/^mon^/z6 T^trainer.legendRank^/?z5;
!!IF:D30/4/5/^^;                        [Archer - set to any rank]
!!IF:E1/30;                             [1 = index of v, 30 = number of extended dialog]
!!VRz1:H1;                              [check if text entered, flag 1=1 if yes]
!!FU|-1/v1<0:E;

!!VR(rankNew:y):Vz1;
!!VR(rankNew):F0/11;

!!if&(mon)<=(BITS_8_MASK);
  !!HE(hero):C0/(slot)/(mon)/(qty)/(rankNew)/12; [12 - mode for setting rank]
!!el;
  !!SN:E7503792/1/(mon)/(rankNew)/0;    [Hawaiing - export exp required for particualr creature/rank]
  !!HE(hero):C0/(slot)/(mon)/(qty)/v1/2;[2 - mode for setting exp]
!!en;

!!VR(hintCad:y):S(slot) +400; get item ID
!!FU(trainer_RefreshRank):P(rankNew)/(hintCad);

!!SN&(rank)<>(rankNew):P^recruit.wav^;

***************************** end experience ********************************

************************ Change creatures quantity **************************
; Manage the quantity of creatures in the hero's army
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_action^=(MOUSE_LMB_PRESSED);
!!VR(monArea:y):S(FALSE);

!!if&i^mouse_item^>=161/i^mouse_item^<=167;
  !!VR(monArea):S1;
!!el&i^mouse_item^>=100/i^mouse_item^<=106;
  !!VR(monArea):S2;
!!el&i^mouse_item^>=400/i^mouse_item^<=406;
  !!VR(monArea):S3;
!!en;

!!FU&(monArea)=(FALSE):E;                           [exit if not target areas]

!!VR(hero:y):Si^trainer_hero^; get Hero

!!if&(monArea)=1;
  !!VR(slot:y):Si^mouse_item^ -161; get slot
!!el&(monArea)=2;
  !!VR(slot):Si^mouse_item^ -100;
!!el&(monArea)=3;
  !!VR(slot):Si^mouse_item^ -400;
!!en;

!!VR(hintCad:y):S(slot) +161; get hint ID

!!HE(hero):C0/(slot)/?(mon:y)/?(qty:y)/?(exp:y)/2;
!!FU|(mon)=(NO_MON)/(qty)=0:E; exit if no creatures

; Ctrl Click - increase creature quantity by 100
!!if&i^key_ctrl^/i^key_shift^=(FALSE)/i^key_alt^=(FALSE);
  !!HE(hero):C0/(slot)/(mon)/d100/(exp)/2;
  !!SN:P^button.wav^;
; Shift Click - decrease creature quantity by 100
!!el&i^key_ctrl^=(FALSE)/i^key_shift^/i^key_alt^=(FALSE);
  !!HE(hero):C0/(slot)/(mon)/d-100/(exp)/2;
  !!SN:P^button.wav^;
; Alt Click - Set creature quantity as 10000
!!el&i^key_ctrl^=(FALSE)/i^key_shift^=(FALSE)/i^key_alt^;
  !!HE(hero):C0/(slot)/(mon)/10000/(exp)/2;
  !!SN:P^button.wav^;
; LMB - dialogue for changing the quantity of creature
!!el;
  !!if&(qty)<=1;
    !!SN:H^monname^/(mon)/0/?z2;
  !!el;
    !!SN:H^monname^/(mon)/1/?z2;
  !!en;

  !!SN:T^trainer.titleMonQty^/?z6/^mon^/z2 T^trainer.legendMonQty^/?z7;
  !!IF:D55/6/7/0/0/0/0/0;
  !!IF:E1/55;
  !!VRz1:H1; **check if text entered, flag 1=1 if yes
  !!FU|-1/v1<0:E; exit if nothing entered

  !!VR(input:y):Vz1 F0/(INT_MAX);                    [restrain value]

  !!if&(input)<=0;
    !!HE(hero):C0/(slot)/(NO_MON)/0;    [remove stack]
  !!el;
    !!HE(hero)&(input)>0:C0/(slot)/(mon)/(input)/(exp)/2; [set creatures with original exp]
  !!en;
!!en;

!!HE(hero):C0/(slot)/?(mon:y)/?(qtyNew:y)/?(exp:y)/2;

!!if&(qty)<>(qtyNew);
  !!if&(qtyNew)<=0;
    !!VR(monCad:y):S(slot) +100;
    !!DL(TRAINER_MAIN_DLG):A(monCad:y)/(DLG_CMD_SET_DEF_FRAME)/1/1;                 [set transparent cadre if no mon]

    !!VR(henchCad:y):S(slot) +228;
    !!DL(TRAINER_MAIN_DLG):E(henchCad)/0;

    !!VR(swordCad:y):S(slot) +400;
    !!DL(TRAINER_MAIN_DLG):A(swordCad)/(DLG_CMD_SET_DEF_FRAME)/0/1;

    !!VRz30:S^^;
    !!DL(TRAINER_MAIN_DLG):A(hintCad)/(DLG_CMD_SET_TEXT)/z30/1 H(monCad)/z30 H(hintCad)/z30 H(swordCad)/z30;
  !!el;
    !!VR(monCadInd:y):S(mon) +2;        [get monster cadre index]

    !!VRz3:M3/(qtyNew);
    !!DL(TRAINER_MAIN_DLG):A(hintCad)/(DLG_CMD_SET_TEXT)/z3/1;
  !!en;
!!en;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!VR(flag:y):S(FALSE);

!!if&i^mouse_item^>=161/i^mouse_item^<=167;
  !!VR(flag):S1;
!!el&i^mouse_item^>=100/i^mouse_item^<=106;
  !!VR(flag):S2;
!!el&i^mouse_item^>=400/i^mouse_item^<=406;
  !!VR(flag):S3;
!!en;

!!FU&(flag)=0:E;                           [exit if not target areas]

!!if&(flag)=1;
  !!VR(slot:y):Si^mouse_item^ -161;
!!el&(flag)=2;
  !!VR(slot):Si^mouse_item^ -100;
!!el&(flag)=3;
  !!VR(slot):Si^mouse_item^ -400;
!!en;

!!FU(trainer_RMBMonInfo):P0/i^trainer_hero^/(slot)/0/1;

!?FU(trainer_RMBMonInfo); OPEN CREATURE FROM HERO SLOT WINDOW
; Master Of Puppets
; Convention - thiscall
; x1 = 0
; x2 - HE:N
; x3 - slot
; x4 - Dismiss button: 1 - present, 0 - absent
; x5 - close the dialog on mouse release: 1 - yep, 0 - nope
!!UN:C6933756/4/?y5;
!!OW:C?y2;
!!VRy1:Sy2*360;
!!VRy5:-y1;
!!UN:C6919480/4/?y10;

!!if&x1=0;
 !!HE-1&x2=-1:N?x2;
 !!VRy1:Sx2*1170+y5+3041;
 !!VRy3:Sx3*4+y1;
 !!UN:Cy3/4/<0;
 !!FU&1:E;

 !!VRy3:Sy1-145;
 !!SN:E5007632/2/y10/y1/x3/y3/0/119/20/x4/x5;
!!en;

************************ end creatures number ***********************

***************************** Commander ******************************

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=111/i^mouse_action^=(MOUSE_LMB_RELEASED);
; Exit the function if commander option is off (1)
!!UN:P(WOG_OPT_DISABLE_COMMANDERS)/?(cmdOff:y);

!!if&(cmdOff);
  !!IF:M^%T(trainer.cmdOff)^;
  !!FU:E;
!!en;

!!DL(TRAINER_CMD_DLG):N^trainer.txt^;
!!SN:W^trainer_hero^/?(cmd:y);
!!CO(cmd):T?(type:y) D?(isDead:y);                 [revive the commander if dead]

!!if&(isDead);                          [new syntax works?]
  !!CO(cmd):D0;
  !!IF:M^%T(trainer.cmdRevived)^;
!!en;

!!CO(cmd):E?(isRecruited:y);            [recruit a commander if there is none]

!!if&(isRecruited)=(FALSE);
  !!CO(cmd):E1;
  !!SN:T^trainer.cmdNew^/?z3/^hero^/s^trainer_heroName^;
  !!IF:M^%z3^;
!!en;

!!FU(trainer_RefreshCommanderPrimSkills):P(cmd);
!!FU(trainer_RefreshCommanderArts):P(cmd);
!!FU(trainer_RefreshCommanders):P(type);

!!DL(TRAINER_CMD_DLG):A13/(DLG_CMD_SET_DEF_FRAME)/(type)/1; set correct commander to display

!!CO(cmd):X2/?(lv:y);
!!VRi^trainer_cmdLv^:S(lv);
!!FU(trainer_RefreshCommanderLv):P(lv);

!!DL(TRAINER_CMD_DLG):S1;

!?FU(trainer_RefreshCommanderPrimSkills);
!#VA(cmd:x);

!!re (primSkill:y)/0/5;
  !!CO(cmd):S(primSkill)/?(level:y);
  ; Set primary skill icons
  !!VR(iconCadre:y):S(primSkill) *6 +(level);
  !!VR(iconItem:y):S(primSkill) +4;
  !!DL(TRAINER_CMD_DLG):A(iconItem)/(DLG_CMD_SET_DEF_FRAME)/(iconCadre:y)/1;
  ; Set primary skill level bars
  !!VR(barCadre:y):S(level);
  !!VR(barItem:y):S(primSkill) +40;
  !!DL(TRAINER_CMD_DLG):A(barItem)/(DLG_CMD_SET_DEF_FRAME)/(barCadre:y)/1;
!!en;

!?FU(trainer_RefreshCommanders);
!#VA(cmd:x);

!!VR(cmdCad:y):S(MON_PALADIN_A) +2;

; Set up all 9 commander portraits
!!re (item:y)/31/39;
  !!DL(TRAINER_CMD_DLG):A(item)/(DLG_CMD_SET_DEF_FRAME)/(cmdCad)/1;
  !!VR(cmdCad):+1;
!!en;

; Set the current one with bland cadre
!!VR(item):S(cmd) +31;
!!DL(TRAINER_CMD_DLG):A(item)/(DLG_CMD_SET_DEF_FRAME)/1/1/1;
; Update the description of commander class
!!VR(mon:y):S(cmd) +(MON_PALADIN_A);
!!SN:H^monname^/(mon)/0/?z4 T^trainer.cmdClass^/?z5/^cmd^/z4;
!!DL(TRAINER_CMD_DLG):A59/(DLG_CMD_SET_TEXT)/z5/1;

; Update the big portrait of commander
; Background
!!if&(mon)=(MON_PALADIN_A);
  !!VRz3:S^CRBKGCAS.pcx^;
!!el&(mon)=(MON_HIEROPHANT_A);
  !!VRz3:S^CRBKGRAM.pcx^;
!!el&(mon)=(MON_TEMPLE_GUARDIAN_A);
  !!VRz3:S^CRBKGTOW.pcx^;
!!el&(mon)=(MON_SUCCUBUS_A);
  !!VRz3:S^CRBKGINF.pcx^;
!!el&(mon)=(MON_SOUL_EATER_A);
  !!VRz3:S^CRBKGNEC.pcx^;
!!el&(mon)=(MON_BRUTE_A);
  !!VRz3:S^CRBKGDUN.pcx^;
!!el&(mon)=(MON_OGRE_LEADER_A);
  !!VRz3:S^CRBKGSTR.pcx^;
!!el&(mon)=(MON_SHAMAN_A);
  !!VRz3:S^CRBKGFOR.pcx^;
!!el&(mon)=(MON_ASTRAL_SPIRIT_A);
  !!VRz3:S^CRBKGEle.pcx^;
!!en;

!!DL(TRAINER_CMD_DLG):A1/(DLG_CMD_SET_PCX)/z3/1;

; Commander Sprite
!!VRz2:S^zm%(mon)npc.def^;
!!DL(TRAINER_CMD_DLG):A30/(DLG_CMD_SET_DEF)/z2/1;

; Upgrade commander's primary skill
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_CMD_DLG)/i^mouse_item^>=46/i^mouse_item^<=51/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!VR(cmd:y):Si^trainer_hero^;
!!VR(ps:y):Si^mouse_item^-46; get skill ID

!!CO(cmd):S(ps)/?(lv:y);

!!if&(lv)<5;
  !!CO(cmd):S(ps)/d1; set bonus
  !!CO(cmd)&(ps)=4:S6/d1;  set magic resistance
!!el;
  !!CO(cmd):S(ps)/(SKILL_NOT_LEARNED);
  !!CO(cmd)&(ps)=4:S6/(SKILL_NOT_LEARNED);
!!en;

!!CO(cmd):S(ps)/?(lvNew:y);
!!FU(trainer_RefreshCommanderPrimSkills)&(lv)<>(lvNew):P(cmd);

; Degrade commander's primary skill
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_CMD_DLG)/i^mouse_item^>=116/i^mouse_item^<=121/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!VR(cmd:y):Si^trainer_hero^;
!!VR(ps:y):Si^mouse_item^ -116; get skill ID

!!CO(cmd):S(ps)/?(lv:y);

!!if&(lv)>(SKILL_NOT_LEARNED);
  !!CO(cmd):S(ps)/d-1; set bonus
  !!CO(cmd)&(ps)=4:S6/d-1;  set magic resistance
!!el;
  !!CO(cmd):S(ps)/d5;
  !!CO(cmd)&(ps)=4:S6/5;
!!en;

!!CO(cmd):S(ps)/?(lvNew:y);
!!FU(trainer_RefreshCommanderPrimSkills)&(lv)<>(lvNew):P(cmd);

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_CMD_DLG)/i^mouse_item^>=4/i^mouse_item^<=9/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!VR(cmd:y):Si^trainer_hero^;
!!VR(ps:y):Si^mouse_item^ -4;
!!CO(cmd):S(ps)/?(lv:y);

!!if&i^key_ctrl^/i^key_shift^=(FALSE)/i^key_alt^=(FALSE);
  !!if&(lv)<5;
    !!CO(cmd):S(ps)/d1;
    !!CO(cmd)&(ps)=4:S6/d1;
  !!el;
    !!CO(cmd):S(ps)/(SKILL_NOT_LEARNED);
    !!CO(cmd)&(ps)=4:S6/(SKILL_NOT_LEARNED);
  !!en;
!!el&i^key_ctrl^=(FALSE)/i^key_shift^/i^key_alt^=(FALSE);
  !!if&(lv)>(SKILL_NOT_LEARNED);
    !!CO(cmd):S(ps)/d-1;
    !!CO(cmd)&(ps)=4:S6/d-1;
  !!el;
    !!CO(cmd):S(ps)/d5;
    !!CO(cmd)&(ps)=4:S6/d5;
  !!en;
!!el&i^key_ctrl^=(FALSE)/i^key_shift^=(FALSE)/i^key_alt^;
  !!CO(cmd):S(ps)/5;
!!en;

!!CO(cmd):S(ps)/?(lvNew:y);

!!if&(lv)<>(lvNew);
  !!FU(trainer_RefreshCommanderPrimSkills):P(cmd);
  !!SN:P^button.wav^;
!!en;

; Change commander
!?FU(OnCustomDialogEvent)&i^dlg_id^=551/i^mouse_item^>30/i^mouse_item^<40/i^mouse_action^=(MOUSE_LMB_PRESSED);
!!SN:W^trainer_hero^/?y1;
!!COy1:T?y2;
!!VRy3:Si^mouse_item^-31; get type ID
!!DL(TRAINER_CMD_DLG):A13/(DLG_CMD_SET_DEF_FRAME)/y3/1; set new commander in item 13
!!DL(TRAINER_CMD_DLG):Ai^mouse_item^/(DLG_CMD_SET_DEF_FRAME)/9/1;
!!COy1:Ty3;
!!FU(trainer_RefreshCommanders):Py3;

!!SN&y2<>y3:P^trn_quest.wav^;

; Give artifact to the commander
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_CMD_DLG)/i^mouse_item^>=70/i^mouse_item^<=79/i^mouse_action^=(MOUSE_LMB_PRESSED);
!!VR(art:y):Si^mouse_item^ +76; get artifact ID/frame
!!SN:W^trainer_hero^/?(cmd:y);

; Loop through all artifact slots of the commander and see if there is same artifact as the chosen or empty slot
!!VR(hasSameArt:y):S(FALSE);
!!VR(hasEmptySlot:y):S(FALSE);

!!re (slot:y)/0/5;
  !!CO(cmd):A3/(slot)/?(artOwned:y)/?(victory:y);

  !!if&(artOwned)=(art);
    !!VR(hasSameArt):+1;
  !!el&(artOwned)<(ART_AXE_OF_SMASHING);
    !!VR(hasEmptySlot):+1;
  !!en;
!!en;

; Remove or add in new artifact
!!if&(hasSameArt);
  !!IF:Q1/(PIC_TYPE_ART)/(art)/2^%T(trainer.cmdRmvArt)^;

  !!if&1;
    !!CO(cmd):A2/(art);                 [remove art]
    !!FU(trainer_RefreshCommanderArts):P(cmd);      [refresh commander artifacts]
    !!FU(trainer_PlayArtSound):P;
  !!en;
!!el&(hasEmptySlot);
  !!CO(cmd):A1/(art)/0;                 [add in new art]
  !!FU(trainer_RefreshCommanderArts):P(cmd);        [refresh commander artifacts]
  !!FU(trainer_PlayArtSound):P;
!!en;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_CMD_DLG)/i^mouse_item^>=22/i^mouse_item^<=27/i^mouse_action^=(MOUSE_LMB_PRESSED); [set victory]
!!VR(slot:y):Si^mouse_item^ -22;
!!COi^trainer_hero^:A3/(slot)/?(art:y)/?(victory:y);
!!FU&(art)<(ART_AXE_OF_SMASHING):E;

!!SN:H^art^/(art)/0/?z1 T^trainer.cmdTitleArt^/?z4/^victory^/(victory)/^art^/z1 T^trainer.cmdLegendArt^/?z5;
!!IF:D30/4/5/^^;
!!IF:E1/30;                             [1 = index of v, 30 = number of extended dialog]
!!VRz1:H1;                              [check if text entered, flag 1=1 if yes]
!!FU|-1/v1<0:E;                         [end function if empty or Esc]

!!VR(victoryNew:y):Vz1;
!!VR(victoryNew):F0/(BITS_15_MASK);     [restrain value]
!!COi^trainer_hero^:A3/(slot)/?(art)/(victoryNew);

!?FU(trainer_RefreshCommanderArts);
!#VA(cmd:x);

!!re (highlight:y)/80/89;
  !!DL(TRAINER_CMD_DLG):A(highlight)/(DLG_CMD_SET_DEF_FRAME)/0/1;
!!en;

!!re i/0/5;
  !!CO(cmd):A3/i/?(art:y)/?(victory:y);
  !!VR(artCad:y):Si +22;

  !!if&(art)<=0;
    ; Switch to transparent def if no artifact is equipped
    !!DL(TRAINER_CMD_DLG):A(artCad)/(DLG_CMD_SET_DEF)/^trn_noArt.def^/1;
  !!el;
    ; switch back to origianl def if any is equipped
    !!DL(TRAINER_CMD_DLG):A(artCad)/(DLG_CMD_SET_DEF)/^artifact.def^/1;    
    !!DL(TRAINER_CMD_DLG):A(artCad)/(DLG_CMD_SET_DEF_FRAME)/(art)/1;
  !!en;

  !!VR(highlight):S(art) -66;
  !!DL(TRAINER_CMD_DLG)&(art)>=(ART_AXE_OF_SMASHING):A(highlight)/(DLG_CMD_SET_DEF_FRAME)/1/1;
!!en;

; info on right-click
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_CMD_DLG)/i^mouse_item^>69/i^mouse_item^<80/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!VR(art:y):Si^mouse_item^+76; get artifact ID
!!SN:H^art^/(art)/1/?(artName:z);
!!IF:Q1/(PIC_TYPE_ART)/(art)/4^%(artName)^;

; commander infos
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_CMD_DLG)/i^mouse_item^>=31/i^mouse_item^<=39/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!VR(mon:y):Si^mouse_item^ +143; get monster ID
!!SN:H^monname^/(mon)/0/?(cmd:z);

!!if&(mon)=(MON_PALADIN_A);
  !!SN:T^trainer.paladin^/?(cmdDesc:z)^cmd^/(cmd);
  !!IF:Q1/(PIC_TYPE_SEC_SKILL)/68/(PIC_TYPE_SPELL)/(SPELL_CURE)/4^%(cmdDesc)^;
!!el&(mon)=(MON_HIEROPHANT_A);
  !!SN:T^trainer.hierophant^/?(cmdDesc)/^cmd^/(cmd);
  !!IF:Q1/(PIC_TYPE_MONSTER)/(MON_FIRST_AID_TENT)/(PIC_TYPE_SPELL)/(SPELL_SHIELD)/4^%(cmdDesc)^;
!!el&(mon)=(MON_TEMPLE_GUARDIAN_A);
  !!SN:T^trainer.templeGuardian^/?(cmdDesc)/^cmd^/(cmd);
  !!IF:Q1/(PIC_TYPE_SEC_SKILL)/29/(PIC_TYPE_SPELL)/(SPELL_PRECISION)/4^%(cmdDesc)^;
!!el&(mon)=(MON_SUCCUBUS_A);
  !!SN:T^trainer.succubus^/?(cmdDesc)/^cmd^/(cmd);
  !!IF:Q1/(PIC_TYPE_SPELL)/(SPELL_FIRE_SHIELD)/4^%(cmdDesc)^;
!!el&(mon)=(MON_SOUL_EATER_A);
  !!SN:T^trainer.soulEater^/?(cmdDesc)/^cmd^/(cmd);
  !!IF:Q1/(PIC_TYPE_SEC_SKILL)/41/(PIC_TYPE_SPELL)/(SPELL_ANIMATE_DEAD)/4^%(cmdDesc)^;
!!el&(mon)=(MON_BRUTE_A);
  !!SN:T^trainer.brute^/?(cmdDesc)/^cmd^/(cmd);
  !!IF:Q1/(PIC_TYPE_SEC_SKILL)/44/(PIC_TYPE_SPELL)/(SPELL_BLOODLUST)/4^%(cmdDesc)^;
!!el&(mon)=(MON_OGRE_LEADER_A);
  !!SN:T^trainer.ogreLeader^/?(cmdDesc)/^cmd^/(cmd);
  !!IF:Q1/(PIC_TYPE_MONSTER)/(MON_BALLISTA)/(PIC_TYPE_SPELL)/(SPELL_STONE_SKIN)/4^%(cmdDesc)^;
!!el&(mon)=(MON_SHAMAN_A);
  !!SN:T^trainer.shaman^/?(cmdDesc)/^cmd^/(cmd);
  !!IF:Q1/(PIC_TYPE_SEC_SKILL)/71/(PIC_TYPE_SPELL)/(SPELL_HASTE)/4^%(cmdDesc)^;
!!el&(mon)=(MON_ASTRAL_SPIRIT_A);
  !!SN:T^trainer.astralSpirit^/?(cmdDesc)/^cmd^/(cmd);
  !!IF:Q1/(PIC_TYPE_SPELL)/(SPELL_COUNTERSTRIKE)/4^%(cmdDesc)^;
!!en;

; Close the commander dialogue
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_CMD_DLG)/i^mouse_item^=12/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!DL(TRAINER_CMD_DLG):C1;

; Show commander dialogue
!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_CMD_DLG)/i^mouse_item^=28/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!FU(trainer_ShowCommanderScreen):Pi^trainer_hero^/0/1/?y1;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_CMD_DLG)/i^mouse_item^>=122/i^mouse_item^<=123/i^mouse_action^=(MOUSE_LMB_PRESSED);
!!SN:T^trainer.titleCmdLv^/?z2/^hero^/s^trainer_heroName^;
!!SN:T^trainer.legendCmdLv^/?z3/^max^/(TRAINER_LEVEL_CAP_LEGIT);
!!IF:D30/2/3/^^;
!!IF:E1/30;                             [1 = index of v, 30 = number of extended dialog]
!!VRz1:H1;                              [check if text entered, flag 1=1 if yes]
!!FU|-1/v1<0:E;                         [end function if empty or Esc]

!!VR(lv:y):Vz1 F1/74;
!!FU(trainer_RefreshCommanderLv):P(lv);                      [refresh interface]
!!VRi^trainer_cmdLv^:S(lv);

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_CMD_DLG)/i^mouse_item^>=122/i^mouse_item^<=123/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!COi^trainer_hero^:X1/?(exp:y) X2/?(lv:y);
!!SN:T^trainer.cmdLvDesc^/?(cmdLvDesc:z)/^lv^/(lv);
!!IF:Q1/(PIC_TYPE_EXPERIENCE)/(exp)/4^%(cmdLvDesc)^;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_CMD_DLG)/i^mouse_item^>=22/i^mouse_item^<=27/i^mouse_action^=(MOUSE_RMB_PRESSED);
!!VR(slot:y):Si^mouse_item^ -22;
!!COi^trainer_hero^:A3/(slot)/?(art:y)/?(victory:y);

!!if&(art)>=(ART_AXE_OF_SMASHING);
  !!SN:H^art^/(art)/0/?(artName:z);
  !!IF:Q1/(PIC_TYPE_ART)/(art)/4^%(artName)^;
!!en;

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_CMD_DLG)/i^mouse_item^=12/i^mouse_action^=(MOUSE_LMB_RELEASED); [close cmd dialogue]
!!VR(cmd:y):Si^trainer_hero^;
!!CO(cmd):X2/?(lv:y);

!!if&i^trainer_cmdLv^<>(lv);           [if commander's lv was changed]
  !!FU(trainer_CalcExpWithLevel):Pi^trainer_cmdLv^/?(expNew:y);
  !!CO(cmd):X1/(expNew);
  !!CO(cmd):X2/i^trainer_cmdLv^;
!!en;

!?FU(trainer_RefreshCommanderLv);
!#VA(lv:x);

!!VRz33:S^%(lv)^;
!!DL(TRAINER_CMD_DLG):A123/(DLG_CMD_SET_TEXT)/z33/1;                   [Do not change z33!]

!?FU(trainer_ShowCommanderScreen);
; x1 - hero ID
; x2 - type of dialogue, 0 for normal type, 1 for upgrade
; x3 - Dismmiss commander button, 0 for yep, 1 for nah
; x4 - return value, 0 for commander alive, 1 for dead
!!VRy1:Sv1;
!!VRx1:*296+42344640;
!!SN:E7775342/2/x1/x2/x3/0 E7812840/1/42337496;
!!VRx4:Sv1;
!!VRv1:Sy1;

**** End Commander ****

**** Henchmen ****

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^=(TRAINER_BTN_HENCH)/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!VR(firstLevelMons[9]:y):C(MON_PIKEMAN)/(MON_CENTAUR)/(MON_GREMLIN)/(MON_IMP)/(MON_SKELETON)/(MON_TROGLODYTE)/(MON_GOBLIN)/(MON_GNOLL)/(MON_PIXIE);

!!VR(hero:y):Si^trainer_hero^;
!!IF:W(hero);

!!if&w118>(NO_MON)/w119<>(TRUE);        [revive henchman if there was a one and perished]
  !!VRw119:S(TRUE);
  !!IF:M^%T(trainer.henchRevived)^;
!!el&w118<=(NO_MON);                    [give henchamn if there was none]
  !!VRw119:S(TRUE);
  !!HE(hero):B2/?(class:y);
  !!VR(town:y):S(class) :2;
  !!VRw118:S(firstLevelMons[town]);
  !!SN:T^trainer.henchNew^/?z3/^hero^/s^trainer_heroName^;
  !!IF:Q1/(PIC_TYPE_MONSTER)/w118/1^%z3^;
!!en;

!!VR(exp:y):Sw117;

!!SN:T^trainer.titleHenchExp^/?z4/^exp^/(exp); [w var can't be in SN:T?]
!!SN:T^trainer.legendHenchExp^/?z5;
!!IF:D30/4/5/^^;
!!IF:E1/30;                             [1 = index of v, 30 = number of extended dialog]
!!VRz1:H1;                              [check if text entered, flag 1=1 if yes]
!!FU|-1/v1<0:E;                         [end function if empty or Esc]

!!VR(expAdd:y):Vz1;
!!VR(expAdd)&(expAdd)<>0:F-2000000000/2000000000; [restrain value]
!!VRw117&(expAdd)<>0:+(expAdd);               [calculate new exp]
!!VRw117|(expAdd)=0/w117<0:S0;             [restrain value, renove all exp if input was 0 or current exp < 0]

!?FU(OnCustomDialogEvent)&i^dlg_id^=(TRAINER_MAIN_DLG)/i^mouse_item^>=228/i^mouse_item^<=234/i^mouse_action^=(MOUSE_LMB_RELEASED);
!!VR(slot:y):Si^mouse_item^ -228;
!!VRi^trainer_hero^:S?(hero:y);
!!HE(hero):C0/(slot)/?(monType:y)/?(monCount:y);
!!FU&(monType)<=(NO_MON):E;

!!SN:H^monname^/(monType)/0/?(mon:z) T^trainer.henchChoice^/?(henchChoice:z)/^mon^/(mon);
!!IF:Q1/(PIC_TYPE_MONSTER)/(monType)/2^%(henchChoice)^;
!!FU&-1:E;

!!IF:W(hero);
!!VRw118:S(monType);
!!VRw119:S(TRUE);

**** End Henchmen ****
